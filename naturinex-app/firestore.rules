rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidSubscription() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscription.status == 'active';
    }
    
    function hasAcceptedPrivacy() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.privacyConsent.accepted == true;
    }
    
    // User document rules
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['subscription', 'stats', 'stripeCustomerId', 'stripeSubscriptionId']);
      allow create: if false; // Only through Cloud Functions
      allow delete: if false; // Never allow direct deletion
    }
    
    // Scan rules
    match /scans/{scanId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        hasAcceptedPrivacy() &&
        request.resource.data.keys().hasAll(['userId', 'timestamp', 'imageUrl']);
      allow update: if false; // Scans are immutable
      allow delete: if false; // Scans cannot be deleted
    }
    
    // Beta feedback rules
    match /beta_feedback/{feedbackId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'title', 'description', 'type']);
      allow update: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false;
    }
    
    // Referral rules
    match /referrals/{referralId} {
      allow read: if isAuthenticated() && 
        (resource.data.referrerId == request.auth.uid || 
         resource.data.referredUserId == request.auth.uid);
      allow create: if false; // Only through Cloud Functions
      allow update: if false;
      allow delete: if false;
    }
    
    // User achievements (gamification)
    match /achievements/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create, update: if false; // Only through Cloud Functions
      allow delete: if false;
    }
    
    // Offline queue - user can read their own queued items
    match /offline_queue/{queueId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Only through Cloud Functions
      allow delete: if false;
    }
    
    // Privacy consent logs - append only, readable by user
    match /privacy_consents/{consentId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if false; // Only through Cloud Functions
      allow update: if false; // Immutable
      allow delete: if false; // Never delete consent records
    }
    
    // Medical disclaimer acknowledgments
    match /disclaimer_acknowledgments/{ackId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if false; // Only through Cloud Functions
      allow update: if false; // Immutable
      allow delete: if false;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow create: if false; // Only through Cloud Functions
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Admin-only collections
    match /api_logs/{logId} {
      allow read, write: if false; // No client access
    }
    
    match /error_logs/{errorId} {
      allow read, write: if false; // No client access
    }
    
    match /security_logs/{logId} {
      allow read, write: if false; // No client access
    }
    
    match /payment_logs/{logId} {
      allow read, write: if false; // No client access
    }
    
    // Catch-all rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}