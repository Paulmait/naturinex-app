/** * Usage-Based Billing Tracker Component * Tracks and displays feature usage with billing integration */import React, { useState, useEffect, useMemo } from 'react';import {  Box,  Card,  CardContent,  Typography,  Grid,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  Paper,  Chip,  LinearProgress,  Alert,  Select,  MenuItem,  FormControl,  InputLabel,  IconButton,  Tooltip,  Button,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  CircularProgress,  Tabs,  Tab,  Divider} from '@mui/material';import {  TrendingUp,  Analytics,  Warning,  CheckCircle,  Timer,  Download,  Refresh,  Info,  Speed,  Assessment,  CalendarToday} from '@mui/icons-material';import {  LineChart,  Line,  AreaChart,  Area,  XAxis,  YAxis,  CartesianGrid,  Tooltip as RechartsTooltip,  ResponsiveContainer,  PieChart,  Pie,  Cell,  BarChart,  Bar} from 'recharts';import { supabase } from '../config/supabase';import subscriptionManager from '../services/subscriptionManager';const UsageTracker = ({ userId, userProfile }) => {  const [usageData, setUsageData] = useState([]);  const [currentPeriodUsage, setCurrentPeriodUsage] = useState({});  const [usageLimits, setUsageLimits] = useState({});  const [billingPeriod, setBillingPeriod] = useState('current');  const [selectedTab, setSelectedTab] = useState(0);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [upgradeDialogOpen, setUpgradeDialogOpen] = useState(false);  // Feature definitions with limits per tier  const featureLimits = {    free: {      scans: 10,      ai_analysis: 5,      exports: 2,      consultations: 0,      storage_mb: 100    },    plus: {      scans: 100,      ai_analysis: 50,      exports: 20,      consultations: 2,      storage_mb: 1000    },    pro: {      scans: -1, // Unlimited      ai_analysis: -1,      exports: -1,      consultations: 10,      storage_mb: 10000    },    enterprise: {      scans: -1,      ai_analysis: -1,      exports: -1,      consultations: -1,      storage_mb: 100000    }  };  useEffect(() => {    if (userId) {      loadUsageData();      loadUsageLimits();    }  }, [userId, billingPeriod]);  const loadUsageData = async () => {    try {      setLoading(true);      // Get date range based on billing period      const { startDate, endDate } = getBillingPeriodRange(billingPeriod);      const { data, error } = await supabase        .from('usage_tracking')        .select('*')        .eq('user_id', userId)        .gte('created_at', startDate.toISOString())        .lte('created_at', endDate.toISOString())        .order('created_at', { ascending: false });      if (error) throw error;      setUsageData(data || []);      processCurrentPeriodUsage(data || []);    } catch (error) {      setError('Failed to load usage data');      console.error('Error loading usage data:', error);    } finally {      setLoading(false);    }  };  const loadUsageLimits = async () => {    try {      const subscription = await subscriptionManager.loadSubscription();      const tier = subscription?.tier || 'free';      setUsageLimits(featureLimits[tier] || featureLimits.free);    } catch (error) {      console.error('Error loading usage limits:', error);      setUsageLimits(featureLimits.free);    }  };  const processCurrentPeriodUsage = (data) => {    const usage = {};    data.forEach(item => {      if (!usage[item.action]) {        usage[item.action] = {          count: 0,          totalCost: 0,          lastUsed: null        };      }      usage[item.action].count += item.quantity || 1;      usage[item.action].totalCost += item.total_cost || 0;      if (!usage[item.action].lastUsed || new Date(item.created_at) > new Date(usage[item.action].lastUsed)) {        usage[item.action].lastUsed = item.created_at;      }    });    setCurrentPeriodUsage(usage);  };  const getBillingPeriodRange = (period) => {    const now = new Date();    let startDate, endDate;    switch (period) {      case 'current':        startDate = new Date(now.getFullYear(), now.getMonth(), 1);        endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);        break;      case 'last':        startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);        endDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59);        break;      case 'last3':        startDate = new Date(now.getFullYear(), now.getMonth() - 2, 1);        endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);        break;      default:        startDate = new Date(now.getFullYear(), now.getMonth(), 1);        endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);    }    return { startDate, endDate };  };  const getUsagePercentage = (action) => {    const used = currentPeriodUsage[action]?.count || 0;    const limit = usageLimits[action] || 0;    if (limit === -1) return 0; // Unlimited    if (limit === 0) return 100; // No access    return Math.min((used / limit) * 100, 100);  };  const getUsageStatus = (action) => {    const percentage = getUsagePercentage(action);    if (usageLimits[action] === -1) return 'unlimited';    if (percentage >= 100) return 'exceeded';    if (percentage >= 80) return 'warning';    if (percentage >= 60) return 'caution';    return 'normal';  };  const getStatusColor = (status) => {    switch (status) {      case 'exceeded': return 'error';      case 'warning': return 'warning';      case 'caution': return 'info';      case 'unlimited': return 'success';      default: return 'primary';    }  };  const formatCurrency = (amount) => {    return new Intl.NumberFormat('en-US', {      style: 'currency',      currency: 'USD'    }).format(amount / 100);  };  const dailyUsageData = useMemo(() => {    const dailyData = {};    usageData.forEach(item => {      const date = new Date(item.created_at).toLocaleDateString();      if (!dailyData[date]) {        dailyData[date] = { date, total: 0 };      }      dailyData[date].total += item.quantity || 1;      dailyData[date][item.action] = (dailyData[date][item.action] || 0) + (item.quantity || 1);    });    return Object.values(dailyData).sort((a, b) => new Date(a.date) - new Date(b.date));  }, [usageData]);  const pieChartData = useMemo(() => {    const actions = Object.keys(currentPeriodUsage);    return actions.map(action => ({      name: action.replace('_', ' ').toUpperCase(),      value: currentPeriodUsage[action].count,      cost: currentPeriodUsage[action].totalCost    }));  }, [currentPeriodUsage]);  const trackUsage = async (action, resourceType = null, resourceId = null, quantity = 1) => {    try {      const { error } = await supabase        .from('usage_tracking')        .insert({          user_id: userId,          action,          resource_type: resourceType,          resource_id: resourceId,          quantity,          metadata: {            timestamp: new Date().toISOString(),            user_tier: userProfile?.subscription_tier || 'free'          }        });      if (error) throw error;      // Reload usage data      await loadUsageData();    } catch (error) {      console.error('Error tracking usage:', error);    }  };  const handleUpgrade = () => {    // Redirect to upgrade page or open upgrade modal    window.location.href = '/upgrade';  };  if (loading) {    return (      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>        <CircularProgress />      </Box>    );  }  return (    <Box>      <Card>        <CardContent>          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>            <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>              <Analytics />              Usage Tracking            </Typography>            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>              <FormControl size="small" sx={{ minWidth: 150 }}>                <InputLabel>Billing Period</InputLabel>                <Select                  value={billingPeriod}                  onChange={(e) => setBillingPeriod(e.target.value)}                  label="Billing Period"                >                  <MenuItem value="current">Current Month</MenuItem>                  <MenuItem value="last">Last Month</MenuItem>                  <MenuItem value="last3">Last 3 Months</MenuItem>                </Select>              </FormControl>              <IconButton onClick={loadUsageData} size="small">                <Refresh />              </IconButton>            </Box>          </Box>          {error && (            <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>              {error}            </Alert>          )}          <Tabs value={selectedTab} onChange={(e, newValue) => setSelectedTab(newValue)} sx={{ mb: 3 }}>            <Tab label="Current Usage" icon={<Speed />} />            <Tab label="Analytics" icon={<Assessment />} />            <Tab label="History" icon={<CalendarToday />} />          </Tabs>          {/* Current Usage Tab */}          {selectedTab === 0 && (            <Box>              <Grid container spacing={3} sx={{ mb: 4 }}>                {Object.entries(usageLimits).map(([action, limit]) => {                  const usage = currentPeriodUsage[action] || { count: 0, totalCost: 0 };                  const percentage = getUsagePercentage(action);                  const status = getUsageStatus(action);                  return (                    <Grid item xs={12} sm={6} md={4} key={action}>                      <Card variant="outlined">                        <CardContent>                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>                            <Typography variant="subtitle1" sx={{ textTransform: 'capitalize' }}>                              {action.replace('_', ' ')}                            </Typography>                            <Chip                              label={status}                              color={getStatusColor(status)}                              size="small"                            />                          </Box>                          <Typography variant="h4" gutterBottom>                            {usage.count}                            {limit !== -1 && (                              <Typography variant="body2" component="span" color="text.secondary">                                {' / '}                                {limit === 0 ? 'N/A' : limit}                              </Typography>                            )}                          </Typography>                          {limit !== -1 && limit > 0 && (                            <LinearProgress                              variant="determinate"                              value={percentage}                              color={getStatusColor(status)}                              sx={{ mb: 1 }}                            />                          )}                          {usage.totalCost > 0 && (                            <Typography variant="body2" color="text.secondary">                              Cost: {formatCurrency(usage.totalCost)}                            </Typography>                          )}                          {usage.lastUsed && (                            <Typography variant="caption" color="text.secondary">                              Last used: {new Date(usage.lastUsed).toLocaleDateString()}                            </Typography>                          )}                          {status === 'exceeded' && (                            <Alert severity="error" sx={{ mt: 1 }}>                              Limit exceeded!{' '}                              <Button size="small" onClick={() => setUpgradeDialogOpen(true)}>                                Upgrade                              </Button>                            </Alert>                          )}                          {status === 'warning' && (                            <Alert severity="warning" sx={{ mt: 1 }}>                              Near limit ({percentage.toFixed(0)}%)                            </Alert>                          )}                        </CardContent>                      </Card>                    </Grid>                  );                })}              </Grid>              {/* Usage Summary */}              <Card variant="outlined" sx={{ mb: 3 }}>                <CardContent>                  <Typography variant="h6" gutterBottom>                    Usage Summary                  </Typography>                  <Grid container spacing={2}>                    <Grid item xs={12} sm={4}>                      <Typography variant="body2" color="text.secondary">Total Actions</Typography>                      <Typography variant="h5">                        {Object.values(currentPeriodUsage).reduce((sum, usage) => sum + usage.count, 0)}                      </Typography>                    </Grid>                    <Grid item xs={12} sm={4}>                      <Typography variant="body2" color="text.secondary">Total Cost</Typography>                      <Typography variant="h5">                        {formatCurrency(Object.values(currentPeriodUsage).reduce((sum, usage) => sum + usage.totalCost, 0))}                      </Typography>                    </Grid>                    <Grid item xs={12} sm={4}>                      <Typography variant="body2" color="text.secondary">Current Tier</Typography>                      <Typography variant="h5" sx={{ textTransform: 'capitalize' }}>                        {userProfile?.subscription_tier || 'Free'}                      </Typography>                    </Grid>                  </Grid>                </CardContent>              </Card>            </Box>          )}          {/* Analytics Tab */}          {selectedTab === 1 && (            <Box>              <Grid container spacing={3}>                <Grid item xs={12} md={6}>                  <Card variant="outlined">                    <CardContent>                      <Typography variant="h6" gutterBottom>                        Daily Usage Trend                      </Typography>                      <ResponsiveContainer width="100%" height={300}>                        <LineChart data={dailyUsageData}>                          <CartesianGrid strokeDasharray="3 3" />                          <XAxis dataKey="date" />                          <YAxis />                          <RechartsTooltip />                          <Line type="monotone" dataKey="total" stroke="#8884d8" strokeWidth={2} />                        </LineChart>                      </ResponsiveContainer>                    </CardContent>                  </Card>                </Grid>                <Grid item xs={12} md={6}>                  <Card variant="outlined">                    <CardContent>                      <Typography variant="h6" gutterBottom>                        Usage Distribution                      </Typography>                      <ResponsiveContainer width="100%" height={300}>                        <PieChart>                          <Pie                            data={pieChartData}                            cx="50%"                            cy="50%"                            labelLine={false}                            label={({ name, value }) => `${name}: ${value}`}                            outerRadius={80}                            fill="#8884d8"                            dataKey="value"                          >                            {pieChartData.map((entry, index) => (                              <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 50%)`} />                            ))}                          </Pie>                          <RechartsTooltip />                        </PieChart>                      </ResponsiveContainer>                    </CardContent>                  </Card>                </Grid>                <Grid item xs={12}>                  <Card variant="outlined">                    <CardContent>                      <Typography variant="h6" gutterBottom>                        Feature Usage by Day                      </Typography>                      <ResponsiveContainer width="100%" height={400}>                        <BarChart data={dailyUsageData}>                          <CartesianGrid strokeDasharray="3 3" />                          <XAxis dataKey="date" />                          <YAxis />                          <RechartsTooltip />                          <Bar dataKey="scans" stackId="a" fill="#8884d8" />                          <Bar dataKey="ai_analysis" stackId="a" fill="#82ca9d" />                          <Bar dataKey="exports" stackId="a" fill="#ffc658" />                          <Bar dataKey="consultations" stackId="a" fill="#ff7300" />                        </BarChart>                      </ResponsiveContainer>                    </CardContent>                  </Card>                </Grid>              </Grid>            </Box>          )}          {/* History Tab */}          {selectedTab === 2 && (            <Box>              <TableContainer component={Paper} variant="outlined">                <Table>                  <TableHead>                    <TableRow>                      <TableCell>Date & Time</TableCell>                      <TableCell>Action</TableCell>                      <TableCell>Resource</TableCell>                      <TableCell>Quantity</TableCell>                      <TableCell>Cost</TableCell>                    </TableRow>                  </TableHead>                  <TableBody>                    {usageData.slice(0, 100).map((item) => (                      <TableRow key={item.id}>                        <TableCell>                          {new Date(item.created_at).toLocaleString()}                        </TableCell>                        <TableCell>                          <Chip                            label={item.action.replace('_', ' ')}                            size="small"                            variant="outlined"                          />                        </TableCell>                        <TableCell>                          {item.resource_type || '-'}                        </TableCell>                        <TableCell>                          {item.quantity || 1}                        </TableCell>                        <TableCell>                          {item.total_cost > 0 ? formatCurrency(item.total_cost) : 'Free'}                        </TableCell>                      </TableRow>                    ))}                  </TableBody>                </Table>              </TableContainer>              {usageData.length === 0 && (                <Box sx={{ textAlign: 'center', py: 4 }}>                  <Analytics sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />                  <Typography variant="h6" color="text.secondary" gutterBottom>                    No Usage Data                  </Typography>                  <Typography variant="body2" color="text.secondary">                    Start using the app to see your usage history here                  </Typography>                </Box>              )}            </Box>          )}        </CardContent>      </Card>      {/* Upgrade Dialog */}      <Dialog open={upgradeDialogOpen} onClose={() => setUpgradeDialogOpen(false)} maxWidth="sm" fullWidth>        <DialogTitle>Upgrade Your Plan</DialogTitle>        <DialogContent>          <Typography gutterBottom>            You've reached your usage limit for this billing period. Upgrade your plan to continue using premium features.          </Typography>          <Box sx={{ mt: 2 }}>            <Typography variant="subtitle2" gutterBottom>              Current Plan: {userProfile?.subscription_tier || 'Free'}            </Typography>            <Divider sx={{ my: 2 }} />            <Typography variant="body2" color="text.secondary">              Upgrade to get:            </Typography>            <ul>              <li>Higher usage limits</li>              <li>Advanced AI analysis</li>              <li>Priority support</li>              <li>Export capabilities</li>            </ul>          </Box>        </DialogContent>        <DialogActions>          <Button onClick={() => setUpgradeDialogOpen(false)}>Cancel</Button>          <Button onClick={handleUpgrade} variant="contained">            View Plans          </Button>        </DialogActions>      </Dialog>    </Box>  );};export default UsageTracker;