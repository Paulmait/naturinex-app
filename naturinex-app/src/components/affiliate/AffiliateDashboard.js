// Comprehensive Affiliate Dashboard Component// Main dashboard showing performance metrics, earnings, and management tools// Created: 2025-09-16import React, { useState, useEffect } from 'react';import {  View,  Text,  StyleSheet,  ScrollView,  TouchableOpacity,  Alert,  RefreshControl,  Dimensions} from 'react-native';import { LineChart, BarChart, PieChart } from 'react-native-chart-kit';import Icon from 'react-native-vector-icons/MaterialIcons';import affiliateManagementService from '../../services/AffiliateManagementService';import PerformanceMetrics from './PerformanceMetrics';import EarningsOverview from './EarningsOverview';import LinkGenerator from './LinkGenerator';import MarketingAssets from './MarketingAssets';import PayoutHistory from './PayoutHistory';const { width: screenWidth } = Dimensions.get('window');const AffiliateDashboard = ({ navigation, affiliateId }) => {  const [dashboardData, setDashboardData] = useState(null);  const [loading, setLoading] = useState(true);  const [refreshing, setRefreshing] = useState(false);  const [activeTab, setActiveTab] = useState('overview');  const [selectedPeriod, setSelectedPeriod] = useState('30d');  useEffect(() => {    loadDashboardData();  }, [affiliateId, selectedPeriod]);  const loadDashboardData = async () => {    try {      setLoading(true);      const result = await affiliateManagementService.getAffiliateDashboard(affiliateId);      if (result.success) {        setDashboardData(result.dashboard);      } else {        Alert.alert('Error', 'Failed to load dashboard data');      }    } catch (error) {      console.error('Dashboard loading error:', error);      Alert.alert('Error', 'Failed to load dashboard data');    } finally {      setLoading(false);    }  };  const onRefresh = async () => {    setRefreshing(true);    await loadDashboardData();    setRefreshing(false);  };  const generateReport = async () => {    try {      const dateRange = getDateRangeFromPeriod(selectedPeriod);      const result = await affiliateManagementService.generatePerformanceReport(        affiliateId,        dateRange      );      if (result.success) {        Alert.alert('Success', 'Report generated successfully', [          { text: 'Download', onPress: () => downloadReport(result.report.pdfUrl) },          { text: 'OK' }        ]);      } else {        Alert.alert('Error', 'Failed to generate report');      }    } catch (error) {      console.error('Report generation error:', error);      Alert.alert('Error', 'Failed to generate report');    }  };  const downloadReport = (url) => {    // Implement report download logic  };  const getDateRangeFromPeriod = (period) => {    const end = new Date();    const start = new Date();    switch (period) {      case '7d':        start.setDate(end.getDate() - 7);        break;      case '30d':        start.setDate(end.getDate() - 30);        break;      case '90d':        start.setDate(end.getDate() - 90);        break;      case '1y':        start.setFullYear(end.getFullYear() - 1);        break;      default:        start.setDate(end.getDate() - 30);    }    return {      startDate: start.toISOString().split('T')[0],      endDate: end.toISOString().split('T')[0]    };  };  const renderTabBar = () => (    <View style={styles.tabBar}>      <TouchableOpacity        style={[styles.tab, activeTab === 'overview' && styles.activeTab]}        onPress={() => setActiveTab('overview')}      >        <Icon name="dashboard" size={20} color={activeTab === 'overview' ? '#2E7D32' : '#666'} />        <Text style={[styles.tabText, activeTab === 'overview' && styles.activeTabText]}>          Overview        </Text>      </TouchableOpacity>      <TouchableOpacity        style={[styles.tab, activeTab === 'performance' && styles.activeTab]}        onPress={() => setActiveTab('performance')}      >        <Icon name="trending-up" size={20} color={activeTab === 'performance' ? '#2E7D32' : '#666'} />        <Text style={[styles.tabText, activeTab === 'performance' && styles.activeTabText]}>          Performance        </Text>      </TouchableOpacity>      <TouchableOpacity        style={[styles.tab, activeTab === 'links' && styles.activeTab]}        onPress={() => setActiveTab('links')}      >        <Icon name="link" size={20} color={activeTab === 'links' ? '#2E7D32' : '#666'} />        <Text style={[styles.tabText, activeTab === 'links' && styles.activeTabText]}>          Links        </Text>      </TouchableOpacity>      <TouchableOpacity        style={[styles.tab, activeTab === 'assets' && styles.activeTab]}        onPress={() => setActiveTab('assets')}      >        <Icon name="folder" size={20} color={activeTab === 'assets' ? '#2E7D32' : '#666'} />        <Text style={[styles.tabText, activeTab === 'assets' && styles.activeTabText]}>          Assets        </Text>      </TouchableOpacity>      <TouchableOpacity        style={[styles.tab, activeTab === 'payouts' && styles.activeTab]}        onPress={() => setActiveTab('payouts')}      >        <Icon name="payment" size={20} color={activeTab === 'payouts' ? '#2E7D32' : '#666'} />        <Text style={[styles.tabText, activeTab === 'payouts' && styles.activeTabText]}>          Payouts        </Text>      </TouchableOpacity>    </View>  );  const renderPeriodSelector = () => (    <View style={styles.periodSelector}>      {['7d', '30d', '90d', '1y'].map((period) => (        <TouchableOpacity          key={period}          style={[            styles.periodButton,            selectedPeriod === period && styles.activePeriodButton          ]}          onPress={() => setSelectedPeriod(period)}        >          <Text style={[            styles.periodButtonText,            selectedPeriod === period && styles.activePeriodButtonText          ]}>            {period.toUpperCase()}          </Text>        </TouchableOpacity>      ))}    </View>  );  const renderOverviewTab = () => {    if (!dashboardData?.summary) return null;    const { summary } = dashboardData;    return (      <ScrollView style={styles.tabContent}>        {/* Key Metrics */}        <View style={styles.metricsGrid}>          <View style={styles.metricCard}>            <Icon name="visibility" size={24} color="#1976D2" />            <Text style={styles.metricValue}>              {summary.total_clicks?.toLocaleString() || '0'}            </Text>            <Text style={styles.metricLabel}>Total Clicks</Text>            <Text style={styles.metricChange}>              +{summary.clicks_last_30_days || 0} this month            </Text>          </View>          <View style={styles.metricCard}>            <Icon name="shopping-cart" size={24} color="#388E3C" />            <Text style={styles.metricValue}>              {summary.total_conversions?.toLocaleString() || '0'}            </Text>            <Text style={styles.metricLabel}>Conversions</Text>            <Text style={styles.metricChange}>              +{summary.conversions_last_30_days || 0} this month            </Text>          </View>          <View style={styles.metricCard}>            <Icon name="attach-money" size={24} color="#F57C00" />            <Text style={styles.metricValue}>              ${(summary.total_commission_earned || 0).toFixed(2)}            </Text>            <Text style={styles.metricLabel}>Total Earned</Text>            <Text style={styles.metricChange}>              +${(summary.commission_last_30_days || 0).toFixed(2)} this month            </Text>          </View>          <View style={styles.metricCard}>            <Icon name="trending-up" size={24} color="#7B1FA2" />            <Text style={styles.metricValue}>              {((summary.conversion_rate || 0) * 100).toFixed(2)}%            </Text>            <Text style={styles.metricLabel}>Conversion Rate</Text>            <Text style={styles.metricChange}>              {summary.conversion_rate > 0.02 ? '▲' : '▼'} Industry avg: 2%            </Text>          </View>        </View>        {/* Tier Information */}        <View style={styles.tierCard}>          <View style={styles.tierHeader}>            <Icon name="star" size={24} color="#FFD700" />            <Text style={styles.tierTitle}>              {summary.tier?.charAt(0).toUpperCase() + summary.tier?.slice(1)} Tier            </Text>          </View>          <Text style={styles.tierCommission}>            {((summary.commission_rate || 0) * 100).toFixed(0)}% Commission Rate          </Text>          <Text style={styles.tierDescription}>            {getTierDescription(summary.tier)}          </Text>          <TouchableOpacity style={styles.tierUpgradeButton}>            <Text style={styles.tierUpgradeText}>View Tier Benefits</Text>          </TouchableOpacity>        </View>        {/* Pending Commissions */}        <View style={styles.pendingCard}>          <Text style={styles.sectionTitle}>Pending Commissions</Text>          <Text style={styles.pendingAmount}>            ${(summary.pending_commission || 0).toFixed(2)}          </Text>          <Text style={styles.pendingDescription}>            Available for payout once minimum threshold is reached          </Text>          {(summary.pending_commission || 0) >= 50 && (            <TouchableOpacity style={styles.payoutButton}>              <Text style={styles.payoutButtonText}>Request Payout</Text>            </TouchableOpacity>          )}        </View>        {/* Recent Notifications */}        {dashboardData.notifications && dashboardData.notifications.length > 0 && (          <View style={styles.notificationsCard}>            <Text style={styles.sectionTitle}>Recent Notifications</Text>            {dashboardData.notifications.slice(0, 3).map((notification) => (              <View key={notification.id} style={styles.notificationItem}>                <Icon                  name={getNotificationIcon(notification.notification_type)}                  size={20}                  color="#666"                />                <View style={styles.notificationContent}>                  <Text style={styles.notificationTitle}>{notification.title}</Text>                  <Text style={styles.notificationMessage}>{notification.message}</Text>                  <Text style={styles.notificationDate}>                    {new Date(notification.created_at).toLocaleDateString()}                  </Text>                </View>              </View>            ))}            <TouchableOpacity style={styles.viewAllButton}>              <Text style={styles.viewAllText}>View All Notifications</Text>            </TouchableOpacity>          </View>        )}      </ScrollView>    );  };  const getTierDescription = (tier) => {    const descriptions = {      bronze: 'Great start! Focus on driving quality traffic to unlock higher tiers.',      silver: 'Well done! You\'re earning bonus commissions on high-value sales.',      gold: 'Excellent performance! Enjoy priority support and custom landing pages.',      platinum: 'Elite affiliate! Maximum commission rates and dedicated account manager.',      healthcare: 'Healthcare professional with access to practitioner-grade supplements.'    };    return descriptions[tier] || 'Keep growing your affiliate business with NaturineX!';  };  const getNotificationIcon = (type) => {    const icons = {      welcome: 'waving-hand',      approval: 'check-circle',      commission: 'attach-money',      payout: 'payment',      tier_upgrade: 'trending-up',      alert: 'warning',      news: 'announcement'    };    return icons[type] || 'notifications';  };  const renderContent = () => {    switch (activeTab) {      case 'overview':        return renderOverviewTab();      case 'performance':        return (          <PerformanceMetrics            affiliateId={affiliateId}            dashboardData={dashboardData}            selectedPeriod={selectedPeriod}          />        );      case 'links':        return <LinkGenerator affiliateId={affiliateId} />;      case 'assets':        return <MarketingAssets affiliateId={affiliateId} />;      case 'payouts':        return <PayoutHistory affiliateId={affiliateId} />;      default:        return renderOverviewTab();    }  };  if (loading) {    return (      <View style={styles.loadingContainer}>        <Text>Loading dashboard...</Text>      </View>    );  }  return (    <View style={styles.container}>      {/* Header */}      <View style={styles.header}>        <Text style={styles.headerTitle}>Affiliate Dashboard</Text>        <View style={styles.headerActions}>          <TouchableOpacity style={styles.reportButton} onPress={generateReport}>            <Icon name="assessment" size={20} color="#fff" />            <Text style={styles.reportButtonText}>Report</Text>          </TouchableOpacity>        </View>      </View>      {/* Period Selector */}      {renderPeriodSelector()}      {/* Tab Bar */}      {renderTabBar()}      {/* Content */}      <ScrollView        style={styles.content}        refreshControl={          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />        }      >        {renderContent()}      </ScrollView>    </View>  );};const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#f5f5f5'  },  loadingContainer: {    flex: 1,    justifyContent: 'center',    alignItems: 'center'  },  header: {    backgroundColor: '#2E7D32',    padding: 16,    paddingTop: 50,    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center'  },  headerTitle: {    color: '#fff',    fontSize: 20,    fontWeight: 'bold'  },  headerActions: {    flexDirection: 'row'  },  reportButton: {    backgroundColor: 'rgba(255,255,255,0.2)',    paddingHorizontal: 12,    paddingVertical: 8,    borderRadius: 8,    flexDirection: 'row',    alignItems: 'center'  },  reportButtonText: {    color: '#fff',    marginLeft: 4,    fontSize: 14,    fontWeight: '600'  },  periodSelector: {    flexDirection: 'row',    backgroundColor: '#fff',    padding: 8,    justifyContent: 'center'  },  periodButton: {    paddingHorizontal: 16,    paddingVertical: 8,    marginHorizontal: 4,    borderRadius: 20,    backgroundColor: '#f0f0f0'  },  activePeriodButton: {    backgroundColor: '#2E7D32'  },  periodButtonText: {    fontSize: 12,    fontWeight: '600',    color: '#666'  },  activePeriodButtonText: {    color: '#fff'  },  tabBar: {    flexDirection: 'row',    backgroundColor: '#fff',    borderBottomWidth: 1,    borderBottomColor: '#e0e0e0'  },  tab: {    flex: 1,    paddingVertical: 12,    alignItems: 'center',    borderBottomWidth: 2,    borderBottomColor: 'transparent'  },  activeTab: {    borderBottomColor: '#2E7D32'  },  tabText: {    fontSize: 12,    marginTop: 4,    color: '#666'  },  activeTabText: {    color: '#2E7D32',    fontWeight: '600'  },  content: {    flex: 1  },  tabContent: {    padding: 16  },  metricsGrid: {    flexDirection: 'row',    flexWrap: 'wrap',    marginBottom: 20  },  metricCard: {    width: '48%',    backgroundColor: '#fff',    padding: 16,    borderRadius: 12,    marginBottom: 12,    marginHorizontal: '1%',    alignItems: 'center',    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  metricValue: {    fontSize: 24,    fontWeight: 'bold',    color: '#333',    marginVertical: 8  },  metricLabel: {    fontSize: 14,    color: '#666',    textAlign: 'center'  },  metricChange: {    fontSize: 12,    color: '#388E3C',    marginTop: 4,    textAlign: 'center'  },  tierCard: {    backgroundColor: '#fff',    padding: 20,    borderRadius: 12,    marginBottom: 20,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  tierHeader: {    flexDirection: 'row',    alignItems: 'center',    marginBottom: 8  },  tierTitle: {    fontSize: 18,    fontWeight: 'bold',    marginLeft: 8,    color: '#333'  },  tierCommission: {    fontSize: 16,    color: '#2E7D32',    fontWeight: '600',    marginBottom: 8  },  tierDescription: {    fontSize: 14,    color: '#666',    lineHeight: 20,    marginBottom: 16  },  tierUpgradeButton: {    backgroundColor: '#f0f7ff',    paddingVertical: 12,    paddingHorizontal: 16,    borderRadius: 8,    alignItems: 'center'  },  tierUpgradeText: {    color: '#1976D2',    fontWeight: '600'  },  pendingCard: {    backgroundColor: '#fff',    padding: 20,    borderRadius: 12,    marginBottom: 20,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  sectionTitle: {    fontSize: 16,    fontWeight: 'bold',    color: '#333',    marginBottom: 12  },  pendingAmount: {    fontSize: 28,    fontWeight: 'bold',    color: '#F57C00',    marginBottom: 8  },  pendingDescription: {    fontSize: 14,    color: '#666',    marginBottom: 16  },  payoutButton: {    backgroundColor: '#2E7D32',    paddingVertical: 12,    paddingHorizontal: 16,    borderRadius: 8,    alignItems: 'center'  },  payoutButtonText: {    color: '#fff',    fontWeight: '600'  },  notificationsCard: {    backgroundColor: '#fff',    padding: 20,    borderRadius: 12,    marginBottom: 20,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  notificationItem: {    flexDirection: 'row',    paddingVertical: 12,    borderBottomWidth: 1,    borderBottomColor: '#f0f0f0'  },  notificationContent: {    flex: 1,    marginLeft: 12  },  notificationTitle: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginBottom: 4  },  notificationMessage: {    fontSize: 12,    color: '#666',    marginBottom: 4  },  notificationDate: {    fontSize: 11,    color: '#999'  },  viewAllButton: {    paddingVertical: 12,    alignItems: 'center'  },  viewAllText: {    color: '#2E7D32',    fontWeight: '600'  }});export default AffiliateDashboard;