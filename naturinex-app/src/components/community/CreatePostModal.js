/** * Create Post Modal Component * Modal for creating new community posts with various content types */import React, { useState } from 'react';import {  View,  Text,  StyleSheet,  TextInput,  TouchableOpacity,  ScrollView,  Modal,  Alert,  Switch} from 'react-native';import { MaterialIcons } from '@expo/vector-icons';const CreatePostModal = ({ visible, onClose, onSubmit, user }) => {  const [postType, setPostType] = useState('text');  const [title, setTitle] = useState('');  const [content, setContent] = useState('');  const [tags, setTags] = useState('');  const [isAnonymous, setIsAnonymous] = useState(false);  const [selectedGroup, setSelectedGroup] = useState(null);  const postTypes = [    { id: 'text', name: 'General Post', icon: 'article', description: 'Share thoughts and experiences' },    { id: 'success_story', name: 'Success Story', icon: 'celebration', description: 'Share your wellness victories' },    { id: 'question', name: 'Question', icon: 'help-outline', description: 'Ask the community for advice' },    { id: 'progress', name: 'Progress Update', icon: 'trending-up', description: 'Share your journey progress' },    { id: 'review', name: 'Product Review', icon: 'star', description: 'Review natural products or services' }  ];  const handleSubmit = () => {    if (!content.trim()) {      Alert.alert('Error', 'Please enter some content for your post');      return;    }    const postData = {      postType,      title: title.trim() || null,      content: content.trim(),      tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),      isAnonymous,      groupId: selectedGroup?.id || null,      mediaUrls: []    };    onSubmit(postData);    resetForm();  };  const resetForm = () => {    setPostType('text');    setTitle('');    setContent('');    setTags('');    setIsAnonymous(false);    setSelectedGroup(null);  };  const handleClose = () => {    resetForm();    onClose();  };  const getPostTypeInfo = (type) => {    return postTypes.find(pt => pt.id === type) || postTypes[0];  };  const renderPostTypeSelector = () => (    <View style={styles.section}>      <Text style={styles.sectionTitle}>Post Type</Text>      <ScrollView horizontal showsHorizontalScrollIndicator={false}>        {postTypes.map((type) => (          <TouchableOpacity            key={type.id}            style={[              styles.postTypeOption,              postType === type.id && styles.postTypeOptionSelected            ]}            onPress={() => setPostType(type.id)}          >            <MaterialIcons              name={type.icon}              size={20}              color={postType === type.id ? '#fff' : '#666'}            />            <Text style={[              styles.postTypeText,              postType === type.id && styles.postTypeTextSelected            ]}>              {type.name}            </Text>          </TouchableOpacity>        ))}      </ScrollView>      <Text style={styles.postTypeDescription}>        {getPostTypeInfo(postType).description}      </Text>    </View>  );  const renderContentFields = () => {    const typeInfo = getPostTypeInfo(postType);    const showTitle = ['success_story', 'question', 'review'].includes(postType);    return (      <View style={styles.section}>        <Text style={styles.sectionTitle}>Content</Text>        {showTitle && (          <View style={styles.formGroup}>            <Text style={styles.label}>Title</Text>            <TextInput              style={styles.input}              placeholder={`Enter ${typeInfo.name.toLowerCase()} title...`}              value={title}              onChangeText={setTitle}              maxLength={100}            />          </View>        )}        <View style={styles.formGroup}>          <Text style={styles.label}>            {postType === 'question' ? 'Your Question' : 'Your Story'}            <Text style={styles.required}> *</Text>          </Text>          <TextInput            style={[styles.input, styles.textArea]}            placeholder={getContentPlaceholder()}            value={content}            onChangeText={setContent}            multiline            numberOfLines={6}            textAlignVertical="top"            maxLength={2000}          />          <Text style={styles.charCount}>{content.length}/2000</Text>        </View>        <View style={styles.formGroup}>          <Text style={styles.label}>Tags (optional)</Text>          <TextInput            style={styles.input}            placeholder="wellness, natural, herbs (separate with commas)"            value={tags}            onChangeText={setTags}          />          <Text style={styles.helpText}>            Add tags to help others find your post          </Text>        </View>      </View>    );  };  const getContentPlaceholder = () => {    switch (postType) {      case 'success_story':        return "Share your success story! What worked for you? How did you overcome challenges? Inspire others with your journey...";      case 'question':        return "What would you like to ask the community? Be specific about your situation for better answers...";      case 'progress':        return "Share an update on your wellness journey. What changes have you noticed? What are you working on?";      case 'review':        return "Share your honest review of a natural product, supplement, or service. What was your experience?";      default:        return "Share your thoughts, experiences, or insights with the community...";    }  };  const renderPrivacyOptions = () => (    <View style={styles.section}>      <Text style={styles.sectionTitle}>Privacy & Settings</Text>      <View style={styles.switchRow}>        <View style={styles.switchInfo}>          <Text style={styles.switchLabel}>Post Anonymously</Text>          <Text style={styles.switchDescription}>            Your name won't be shown with this post          </Text>        </View>        <Switch          value={isAnonymous}          onValueChange={setIsAnonymous}          trackColor={{ false: '#767577', true: '#81b0ff' }}          thumbColor={isAnonymous ? '#2E7D32' : '#f4f3f4'}        />      </View>    </View>  );  const renderGuidelines = () => (    <View style={styles.guidelinesSection}>      <View style={styles.guidelinesHeader}>        <MaterialIcons name="info" size={16} color="#2196F3" />        <Text style={styles.guidelinesTitle}>Community Guidelines</Text>      </View>      <Text style={styles.guidelinesText}>        • Be respectful and supportive{'\n'}        • Share evidence-based information{'\n'}        • No medical advice or diagnosis{'\n'}        • Keep content wellness-focused{'\n'}        • Respect privacy and confidentiality      </Text>    </View>  );  return (    <Modal      visible={visible}      animationType="slide"      presentationStyle="pageSheet"      onRequestClose={handleClose}    >      <View style={styles.container}>        <View style={styles.header}>          <TouchableOpacity onPress={handleClose}>            <MaterialIcons name="close" size={24} color="#666" />          </TouchableOpacity>          <Text style={styles.title}>Create Post</Text>          <TouchableOpacity            onPress={handleSubmit}            style={[              styles.submitButton,              !content.trim() && styles.submitButtonDisabled            ]}            disabled={!content.trim()}          >            <Text style={[              styles.submitText,              !content.trim() && styles.submitTextDisabled            ]}>              Post            </Text>          </TouchableOpacity>        </View>        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>          {renderPostTypeSelector()}          {renderContentFields()}          {renderPrivacyOptions()}          {renderGuidelines()}        </ScrollView>      </View>    </Modal>  );};const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#fff',  },  header: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'space-between',    paddingHorizontal: 16,    paddingVertical: 16,    borderBottomWidth: 1,    borderBottomColor: '#eee',  },  title: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',  },  submitButton: {    backgroundColor: '#2E7D32',    borderRadius: 6,    paddingHorizontal: 16,    paddingVertical: 8,  },  submitButtonDisabled: {    backgroundColor: '#ccc',  },  submitText: {    color: '#fff',    fontSize: 16,    fontWeight: '600',  },  submitTextDisabled: {    color: '#999',  },  content: {    flex: 1,    paddingHorizontal: 16,  },  section: {    marginVertical: 20,  },  sectionTitle: {    fontSize: 16,    fontWeight: 'bold',    color: '#333',    marginBottom: 12,  },  postTypeOption: {    flexDirection: 'row',    alignItems: 'center',    backgroundColor: '#f0f0f0',    borderRadius: 20,    paddingHorizontal: 16,    paddingVertical: 8,    marginRight: 12,  },  postTypeOptionSelected: {    backgroundColor: '#2E7D32',  },  postTypeText: {    fontSize: 14,    color: '#666',    marginLeft: 8,    fontWeight: '500',  },  postTypeTextSelected: {    color: '#fff',  },  postTypeDescription: {    fontSize: 12,    color: '#666',    marginTop: 8,    fontStyle: 'italic',  },  formGroup: {    marginBottom: 16,  },  label: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginBottom: 8,  },  required: {    color: '#F44336',  },  input: {    borderWidth: 1,    borderColor: '#ddd',    borderRadius: 8,    padding: 12,    fontSize: 16,    backgroundColor: '#fff',  },  textArea: {    textAlignVertical: 'top',    minHeight: 120,  },  charCount: {    fontSize: 12,    color: '#666',    textAlign: 'right',    marginTop: 4,  },  helpText: {    fontSize: 12,    color: '#666',    marginTop: 4,  },  switchRow: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'space-between',    paddingVertical: 8,  },  switchInfo: {    flex: 1,    marginRight: 16,  },  switchLabel: {    fontSize: 16,    color: '#333',    fontWeight: '500',    marginBottom: 2,  },  switchDescription: {    fontSize: 12,    color: '#666',  },  guidelinesSection: {    backgroundColor: '#F3F4F6',    borderRadius: 8,    padding: 16,    marginVertical: 20,  },  guidelinesHeader: {    flexDirection: 'row',    alignItems: 'center',    marginBottom: 8,  },  guidelinesTitle: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginLeft: 8,  },  guidelinesText: {    fontSize: 12,    color: '#666',    lineHeight: 18,  },});export default CreatePostModal;