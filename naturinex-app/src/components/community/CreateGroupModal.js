/** * Create Group Modal Component * Modal for creating new support groups */import React, { useState } from 'react';import {  View,  Text,  StyleSheet,  TextInput,  TouchableOpacity,  ScrollView,  Modal,  Alert,  Switch} from 'react-native';import { MaterialIcons } from '@expo/vector-icons';const CreateGroupModal = ({ visible, onClose, onSubmit, categories, user }) => {  const [groupName, setGroupName] = useState('');  const [description, setDescription] = useState('');  const [category, setCategory] = useState('');  const [tags, setTags] = useState('');  const [guidelines, setGuidelines] = useState('');  const [isPrivate, setIsPrivate] = useState(false);  const [requiresApproval, setRequiresApproval] = useState(false);  const [maxMembers, setMaxMembers] = useState('1000');  const handleSubmit = () => {    if (!groupName.trim()) {      Alert.alert('Error', 'Please enter a group name');      return;    }    if (!description.trim()) {      Alert.alert('Error', 'Please enter a group description');      return;    }    if (!category) {      Alert.alert('Error', 'Please select a category');      return;    }    const groupData = {      name: groupName.trim(),      description: description.trim(),      conditionCategory: category,      tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),      guidelines: guidelines.trim() || null,      isPrivate,      requiresApproval,      maxMembers: parseInt(maxMembers) || 1000,      moderationLevel: 'moderate'    };    onSubmit(groupData);    resetForm();  };  const resetForm = () => {    setGroupName('');    setDescription('');    setCategory('');    setTags('');    setGuidelines('');    setIsPrivate(false);    setRequiresApproval(false);    setMaxMembers('1000');  };  const handleClose = () => {    resetForm();    onClose();  };  const renderBasicInfo = () => (    <View style={styles.section}>      <Text style={styles.sectionTitle}>Basic Information</Text>      <View style={styles.formGroup}>        <Text style={styles.label}>          Group Name <Text style={styles.required}>*</Text>        </Text>        <TextInput          style={styles.input}          placeholder="e.g., Diabetes Support Community"          value={groupName}          onChangeText={setGroupName}          maxLength={100}        />      </View>      <View style={styles.formGroup}>        <Text style={styles.label}>          Description <Text style={styles.required}>*</Text>        </Text>        <TextInput          style={[styles.input, styles.textArea]}          placeholder="Describe the purpose and focus of your support group..."          value={description}          onChangeText={setDescription}          multiline          numberOfLines={4}          textAlignVertical="top"          maxLength={500}        />        <Text style={styles.charCount}>{description.length}/500</Text>      </View>      <View style={styles.formGroup}>        <Text style={styles.label}>          Category <Text style={styles.required}>*</Text>        </Text>        <ScrollView horizontal showsHorizontalScrollIndicator={false}>          {categories.map((cat) => (            <TouchableOpacity              key={cat.id}              style={[                styles.categoryOption,                category === cat.id && styles.categoryOptionSelected              ]}              onPress={() => setCategory(cat.id)}            >              <MaterialIcons                name={cat.icon}                size={16}                color={category === cat.id ? '#fff' : '#666'}              />              <Text style={[                styles.categoryText,                category === cat.id && styles.categoryTextSelected              ]}>                {cat.name}              </Text>            </TouchableOpacity>          ))}        </ScrollView>      </View>      <View style={styles.formGroup}>        <Text style={styles.label}>Tags (optional)</Text>        <TextInput          style={styles.input}          placeholder="natural, support, wellness (separate with commas)"          value={tags}          onChangeText={setTags}        />        <Text style={styles.helpText}>          Add tags to help people find your group        </Text>      </View>    </View>  );  const renderGroupSettings = () => (    <View style={styles.section}>      <Text style={styles.sectionTitle}>Group Settings</Text>      <View style={styles.switchRow}>        <View style={styles.switchInfo}>          <Text style={styles.switchLabel}>Private Group</Text>          <Text style={styles.switchDescription}>            Only invited members can see and join this group          </Text>        </View>        <Switch          value={isPrivate}          onValueChange={setIsPrivate}          trackColor={{ false: '#767577', true: '#81b0ff' }}          thumbColor={isPrivate ? '#2E7D32' : '#f4f3f4'}        />      </View>      <View style={styles.switchRow}>        <View style={styles.switchInfo}>          <Text style={styles.switchLabel}>Require Approval</Text>          <Text style={styles.switchDescription}>            Review and approve new member requests          </Text>        </View>        <Switch          value={requiresApproval}          onValueChange={setRequiresApproval}          trackColor={{ false: '#767577', true: '#81b0ff' }}          thumbColor={requiresApproval ? '#2E7D32' : '#f4f3f4'}        />      </View>      <View style={styles.formGroup}>        <Text style={styles.label}>Maximum Members</Text>        <TextInput          style={styles.input}          placeholder="1000"          value={maxMembers}          onChangeText={setMaxMembers}          keyboardType="numeric"        />        <Text style={styles.helpText}>          Set a limit on how many members can join        </Text>      </View>    </View>  );  const renderGuidelines = () => (    <View style={styles.section}>      <Text style={styles.sectionTitle}>Community Guidelines</Text>      <View style={styles.formGroup}>        <Text style={styles.label}>Group Guidelines (optional)</Text>        <TextInput          style={[styles.input, styles.textArea]}          placeholder="Set specific rules and expectations for your group members..."          value={guidelines}          onChangeText={setGuidelines}          multiline          numberOfLines={4}          textAlignVertical="top"          maxLength={1000}        />        <Text style={styles.charCount}>{guidelines.length}/1000</Text>      </View>      <View style={styles.defaultGuidelines}>        <Text style={styles.defaultGuidelinesTitle}>Default Community Guidelines Apply:</Text>        <Text style={styles.defaultGuidelinesText}>          • Be respectful and supportive{'\n'}          • No medical advice or diagnosis{'\n'}          • Share evidence-based information{'\n'}          • Respect privacy and confidentiality{'\n'}          • Stay on topic and relevant{'\n'}          • No spam or promotional content        </Text>      </View>    </View>  );  const renderResponsibilities = () => (    <View style={styles.responsibilitiesSection}>      <View style={styles.responsibilitiesHeader}>        <MaterialIcons name="admin-panel-settings" size={20} color="#FF9800" />        <Text style={styles.responsibilitiesTitle}>Moderator Responsibilities</Text>      </View>      <Text style={styles.responsibilitiesText}>        As a group creator, you'll be responsible for:{'\n\n'}        • Moderating discussions and content{'\n'}        • Enforcing community guidelines{'\n'}        • Welcoming and supporting new members{'\n'}        • Maintaining a positive environment{'\n'}        • Reporting violations to platform admins      </Text>    </View>  );  return (    <Modal      visible={visible}      animationType="slide"      presentationStyle="fullScreen"      onRequestClose={handleClose}    >      <View style={styles.container}>        <View style={styles.header}>          <TouchableOpacity onPress={handleClose}>            <MaterialIcons name="close" size={24} color="#666" />          </TouchableOpacity>          <Text style={styles.title}>Create Support Group</Text>          <TouchableOpacity            onPress={handleSubmit}            style={[              styles.submitButton,              (!groupName.trim() || !description.trim() || !category) && styles.submitButtonDisabled            ]}            disabled={!groupName.trim() || !description.trim() || !category}          >            <Text style={[              styles.submitText,              (!groupName.trim() || !description.trim() || !category) && styles.submitTextDisabled            ]}>              Create            </Text>          </TouchableOpacity>        </View>        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>          {renderBasicInfo()}          {renderGroupSettings()}          {renderGuidelines()}          {renderResponsibilities()}        </ScrollView>      </View>    </Modal>  );};const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#fff',  },  header: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'space-between',    paddingHorizontal: 16,    paddingVertical: 16,    borderBottomWidth: 1,    borderBottomColor: '#eee',  },  title: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',  },  submitButton: {    backgroundColor: '#2E7D32',    borderRadius: 6,    paddingHorizontal: 16,    paddingVertical: 8,  },  submitButtonDisabled: {    backgroundColor: '#ccc',  },  submitText: {    color: '#fff',    fontSize: 16,    fontWeight: '600',  },  submitTextDisabled: {    color: '#999',  },  content: {    flex: 1,    paddingHorizontal: 16,  },  section: {    marginVertical: 20,  },  sectionTitle: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',    marginBottom: 16,  },  formGroup: {    marginBottom: 16,  },  label: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginBottom: 8,  },  required: {    color: '#F44336',  },  input: {    borderWidth: 1,    borderColor: '#ddd',    borderRadius: 8,    padding: 12,    fontSize: 16,    backgroundColor: '#fff',  },  textArea: {    textAlignVertical: 'top',    minHeight: 100,  },  charCount: {    fontSize: 12,    color: '#666',    textAlign: 'right',    marginTop: 4,  },  helpText: {    fontSize: 12,    color: '#666',    marginTop: 4,  },  categoryOption: {    flexDirection: 'row',    alignItems: 'center',    backgroundColor: '#f0f0f0',    borderRadius: 16,    paddingHorizontal: 12,    paddingVertical: 8,    marginRight: 8,    marginBottom: 8,  },  categoryOptionSelected: {    backgroundColor: '#2E7D32',  },  categoryText: {    fontSize: 12,    color: '#666',    marginLeft: 6,    fontWeight: '500',  },  categoryTextSelected: {    color: '#fff',  },  switchRow: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'space-between',    paddingVertical: 12,    borderBottomWidth: 1,    borderBottomColor: '#f0f0f0',  },  switchInfo: {    flex: 1,    marginRight: 16,  },  switchLabel: {    fontSize: 16,    color: '#333',    fontWeight: '500',    marginBottom: 2,  },  switchDescription: {    fontSize: 12,    color: '#666',  },  defaultGuidelines: {    backgroundColor: '#F3F4F6',    borderRadius: 8,    padding: 12,    marginTop: 8,  },  defaultGuidelinesTitle: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginBottom: 8,  },  defaultGuidelinesText: {    fontSize: 12,    color: '#666',    lineHeight: 18,  },  responsibilitiesSection: {    backgroundColor: '#FFF3E0',    borderRadius: 8,    padding: 16,    marginVertical: 20,  },  responsibilitiesHeader: {    flexDirection: 'row',    alignItems: 'center',    marginBottom: 12,  },  responsibilitiesTitle: {    fontSize: 16,    fontWeight: 'bold',    color: '#333',    marginLeft: 8,  },  responsibilitiesText: {    fontSize: 14,    color: '#666',    lineHeight: 20,  },});export default CreateGroupModal;