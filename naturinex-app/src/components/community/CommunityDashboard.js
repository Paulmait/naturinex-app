/** * Community Dashboard Component * Main hub for all community features and navigation */import React, { useState, useEffect } from 'react';import {  View,  Text,  StyleSheet,  ScrollView,  TouchableOpacity,  Alert,  RefreshControl,  Dimensions} from 'react-native';import { MaterialIcons, Ionicons } from '@expo/vector-icons';import { LinearGradient } from 'expo-linear-gradient';import CommunityService from '../../services/CommunityService';import LoadingAnimation from '../LoadingAnimation';const { width: screenWidth } = Dimensions.get('window');const CommunityDashboard = ({ user, navigation }) => {  const [userAchievements, setUserAchievements] = useState(null);  const [communityStats, setCommunityStats] = useState(null);  const [trendingPosts, setTrendingPosts] = useState([]);  const [userGroups, setUserGroups] = useState([]);  const [recentActivity, setRecentActivity] = useState([]);  const [loading, setLoading] = useState(true);  const [refreshing, setRefreshing] = useState(false);  const dashboardItems = [    {      id: 'feed',      title: 'Community Feed',      description: 'Latest posts and discussions',      icon: 'forum',      color: '#2196F3',      route: 'CommunityFeed'    },    {      id: 'groups',      title: 'Support Groups',      description: 'Join condition-specific communities',      icon: 'group',      color: '#4CAF50',      route: 'SupportGroups'    },    {      id: 'recipes',      title: 'Recipe Sharing',      description: 'Natural remedy recipes',      icon: 'restaurant',      color: '#FF9800',      route: 'RecipeSharing'    },    {      id: 'expert_qa',      title: 'Expert Q&A',      description: 'Ask verified medical professionals',      icon: 'help',      color: '#9C27B0',      route: 'ExpertQA'    },    {      id: 'achievements',      title: 'Achievements',      description: 'Track your progress and badges',      icon: 'emoji-events',      color: '#FF5722',      route: 'AchievementSystem'    },    {      id: 'profile',      title: 'My Profile',      description: 'View your community profile',      icon: 'person',      color: '#607D8B',      route: 'UserProfile',      params: { userId: user?.uid }    }  ];  useEffect(() => {    loadDashboardData();  }, []);  const loadDashboardData = async () => {    try {      setLoading(true);      // Load user achievements      if (user?.uid) {        const userProfile = await CommunityService.getUserProfile(user.uid);        setUserAchievements(userProfile);      }      // Load community analytics      const analytics = await CommunityService.getCommunityAnalytics('7days');      setCommunityStats(analytics);      // Load trending posts (mock data for now)      const trending = [        {          id: '1',          title: 'Natural Anxiety Relief Success Story',          engagement_score: 45.2,          author: 'Sarah M.',          reactions: 24        },        {          id: '2',          title: 'Turmeric Golden Milk Recipe',          engagement_score: 38.7,          author: 'Dr. Chen',          reactions: 19        },        {          id: '3',          title: 'Question: Best herbs for sleep?',          engagement_score: 32.1,          author: 'Anonymous',          reactions: 15        }      ];      setTrendingPosts(trending);      // Track dashboard visit      if (user?.uid) {        await CommunityService.trackEngagement(user.uid, 'view_dashboard', {          timestamp: new Date().toISOString()        });      }    } catch (error) {      console.error('Error loading dashboard data:', error);      Alert.alert('Error', 'Failed to load community data');    } finally {      setLoading(false);      setRefreshing(false);    }  };  const handleRefresh = () => {    setRefreshing(true);    loadDashboardData();  };  const handleFeaturePress = async (item) => {    if (!user) {      Alert.alert('Login Required', 'Please log in to access community features');      return;    }    // Track feature engagement    await CommunityService.trackEngagement(user.uid, 'access_feature', {      feature: item.id,      timestamp: new Date().toISOString()    });    // Navigate to feature    if (item.params) {      navigation.navigate(item.route, item.params);    } else {      navigation.navigate(item.route);    }  };  const renderWelcomeHeader = () => (    <LinearGradient      colors={['#2E7D32', '#4CAF50']}      style={styles.welcomeHeader}    >      <View style={styles.welcomeContent}>        <Text style={styles.welcomeTitle}>          Welcome to the Community, {user?.displayName?.split(' ')[0] || 'Friend'}!        </Text>        <Text style={styles.welcomeSubtitle}>          Connect, share, and grow together on your wellness journey        </Text>      </View>      {userAchievements && (        <View style={styles.quickStats}>          <View style={styles.quickStat}>            <Text style={styles.quickStatNumber}>{userAchievements.level || 1}</Text>            <Text style={styles.quickStatLabel}>Level</Text>          </View>          <View style={styles.quickStat}>            <Text style={styles.quickStatNumber}>{userAchievements.total_points || 0}</Text>            <Text style={styles.quickStatLabel}>Points</Text>          </View>          <View style={styles.quickStat}>            <Text style={styles.quickStatNumber}>{userAchievements.badges?.length || 0}</Text>            <Text style={styles.quickStatLabel}>Badges</Text>          </View>        </View>      )}    </LinearGradient>  );  const renderCommunityStats = () => (    <View style={styles.statsSection}>      <Text style={styles.sectionTitle}>Community Pulse</Text>      <View style={styles.statsGrid}>        <View style={styles.statCard}>          <MaterialIcons name="people" size={24} color="#2196F3" />          <Text style={styles.statNumber}>{communityStats?.uniqueUsers || 0}</Text>          <Text style={styles.statLabel}>Active Members</Text>        </View>        <View style={styles.statCard}>          <MaterialIcons name="forum" size={24} color="#4CAF50" />          <Text style={styles.statNumber}>{communityStats?.actionBreakdown?.create_post || 0}</Text>          <Text style={styles.statLabel}>Posts This Week</Text>        </View>        <View style={styles.statCard}>          <MaterialIcons name="chat" size={24} color="#FF9800" />          <Text style={styles.statNumber}>{communityStats?.actionBreakdown?.create_comment || 0}</Text>          <Text style={styles.statLabel}>Comments</Text>        </View>        <View style={styles.statCard}>          <MaterialIcons name="favorite" size={24} color="#E91E63" />          <Text style={styles.statNumber}>{communityStats?.actionBreakdown?.add_reaction || 0}</Text>          <Text style={styles.statLabel}>Reactions</Text>        </View>      </View>    </View>  );  const renderQuickActions = () => (    <View style={styles.quickActionsSection}>      <Text style={styles.sectionTitle}>Quick Actions</Text>      <ScrollView        horizontal        showsHorizontalScrollIndicator={false}        contentContainerStyle={styles.quickActionsContainer}      >        <TouchableOpacity          style={styles.quickAction}          onPress={() => navigation.navigate('CreatePost')}        >          <View style={[styles.quickActionIcon, { backgroundColor: '#2196F3' }]}>            <MaterialIcons name="create" size={20} color="#fff" />          </View>          <Text style={styles.quickActionText}>Create Post</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickAction}          onPress={() => navigation.navigate('ExpertQA')}        >          <View style={[styles.quickActionIcon, { backgroundColor: '#9C27B0' }]}>            <MaterialIcons name="help" size={20} color="#fff" />          </View>          <Text style={styles.quickActionText}>Ask Expert</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickAction}          onPress={() => navigation.navigate('RecipeSharing')}        >          <View style={[styles.quickActionIcon, { backgroundColor: '#FF9800' }]}>            <MaterialIcons name="restaurant" size={20} color="#fff" />          </View>          <Text style={styles.quickActionText}>Share Recipe</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickAction}          onPress={() => navigation.navigate('SupportGroups')}        >          <View style={[styles.quickActionIcon, { backgroundColor: '#4CAF50' }]}>            <MaterialIcons name="group-add" size={20} color="#fff" />          </View>          <Text style={styles.quickActionText}>Join Group</Text>        </TouchableOpacity>      </ScrollView>    </View>  );  const renderTrendingPosts = () => (    <View style={styles.trendingSection}>      <View style={styles.sectionHeader}>        <Text style={styles.sectionTitle}>Trending This Week</Text>        <TouchableOpacity onPress={() => navigation.navigate('CommunityFeed')}>          <Text style={styles.seeAllText}>See All</Text>        </TouchableOpacity>      </View>      {trendingPosts.map((post, index) => (        <TouchableOpacity          key={post.id}          style={styles.trendingPost}          onPress={() => navigation.navigate('PostDetail', { postId: post.id })}        >          <View style={styles.trendingRank}>            <Text style={styles.trendingNumber}>{index + 1}</Text>          </View>          <View style={styles.trendingContent}>            <Text style={styles.trendingTitle} numberOfLines={2}>              {post.title}            </Text>            <Text style={styles.trendingAuthor}>by {post.author}</Text>          </View>          <View style={styles.trendingStats}>            <MaterialIcons name="trending-up" size={16} color="#4CAF50" />            <Text style={styles.trendingScore}>{post.reactions}</Text>          </View>        </TouchableOpacity>      ))}    </View>  );  const renderFeatureGrid = () => (    <View style={styles.featuresSection}>      <Text style={styles.sectionTitle}>Explore Community</Text>      <View style={styles.featuresGrid}>        {dashboardItems.map((item, index) => (          <TouchableOpacity            key={item.id}            style={[              styles.featureCard,              index % 2 === 0 ? { marginRight: 8 } : { marginLeft: 8 }            ]}            onPress={() => handleFeaturePress(item)}          >            <View style={[styles.featureIcon, { backgroundColor: item.color }]}>              <MaterialIcons name={item.icon} size={24} color="#fff" />            </View>            <Text style={styles.featureTitle}>{item.title}</Text>            <Text style={styles.featureDescription} numberOfLines={2}>              {item.description}            </Text>          </TouchableOpacity>        ))}      </View>    </View>  );  const renderRecentActivity = () => {    if (!userAchievements || (!userAchievements.posts_created && !userAchievements.comments_created)) {      return (        <View style={styles.activitySection}>          <Text style={styles.sectionTitle}>Get Started</Text>          <View style={styles.getStartedCard}>            <MaterialIcons name="rocket-launch" size={32} color="#2196F3" />            <Text style={styles.getStartedTitle}>Welcome to the Community!</Text>            <Text style={styles.getStartedText}>              Start by introducing yourself, asking a question, or sharing your wellness journey.            </Text>            <TouchableOpacity              style={styles.getStartedButton}              onPress={() => navigation.navigate('CommunityFeed')}            >              <Text style={styles.getStartedButtonText}>Explore Feed</Text>            </TouchableOpacity>          </View>        </View>      );    }    return (      <View style={styles.activitySection}>        <Text style={styles.sectionTitle}>Your Community Impact</Text>        <View style={styles.impactStats}>          <View style={styles.impactStat}>            <MaterialIcons name="create" size={20} color="#2196F3" />            <Text style={styles.impactNumber}>{userAchievements.posts_created}</Text>            <Text style={styles.impactLabel}>Posts</Text>          </View>          <View style={styles.impactStat}>            <MaterialIcons name="chat" size={20} color="#4CAF50" />            <Text style={styles.impactNumber}>{userAchievements.comments_created}</Text>            <Text style={styles.impactLabel}>Comments</Text>          </View>          <View style={styles.impactStat}>            <MaterialIcons name="favorite" size={20} color="#E91E63" />            <Text style={styles.impactNumber}>{userAchievements.reactions_received}</Text>            <Text style={styles.impactLabel}>Reactions</Text>          </View>        </View>      </View>    );  };  if (loading) {    return (      <View style={styles.loadingContainer}>        <LoadingAnimation />        <Text style={styles.loadingText}>Loading community dashboard...</Text>      </View>    );  }  return (    <ScrollView      style={styles.container}      refreshControl={        <RefreshControl          refreshing={refreshing}          onRefresh={handleRefresh}          colors={['#2E7D32']}          tintColor="#2E7D32"        />      }      showsVerticalScrollIndicator={false}    >      {renderWelcomeHeader()}      {renderQuickActions()}      {renderCommunityStats()}      {renderTrendingPosts()}      {renderFeatureGrid()}      {renderRecentActivity()}    </ScrollView>  );};const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#f5f5f5',  },  welcomeHeader: {    paddingHorizontal: 20,    paddingTop: 40,    paddingBottom: 24,  },  welcomeContent: {    marginBottom: 20,  },  welcomeTitle: {    fontSize: 24,    fontWeight: 'bold',    color: '#fff',    marginBottom: 8,  },  welcomeSubtitle: {    fontSize: 16,    color: '#E8F5E8',    lineHeight: 22,  },  quickStats: {    flexDirection: 'row',    justifyContent: 'space-around',  },  quickStat: {    alignItems: 'center',  },  quickStatNumber: {    fontSize: 20,    fontWeight: 'bold',    color: '#fff',    marginBottom: 4,  },  quickStatLabel: {    fontSize: 12,    color: '#E8F5E8',  },  quickActionsSection: {    backgroundColor: '#fff',    paddingVertical: 20,    marginBottom: 8,  },  quickActionsContainer: {    paddingHorizontal: 20,  },  quickAction: {    alignItems: 'center',    marginRight: 20,  },  quickActionIcon: {    width: 48,    height: 48,    borderRadius: 24,    alignItems: 'center',    justifyContent: 'center',    marginBottom: 8,  },  quickActionText: {    fontSize: 12,    color: '#333',    fontWeight: '500',    textAlign: 'center',  },  statsSection: {    backgroundColor: '#fff',    padding: 20,    marginBottom: 8,  },  sectionTitle: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',    marginBottom: 16,  },  sectionHeader: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    marginBottom: 16,  },  seeAllText: {    fontSize: 14,    color: '#2E7D32',    fontWeight: '500',  },  statsGrid: {    flexDirection: 'row',    flexWrap: 'wrap',    justifyContent: 'space-between',  },  statCard: {    width: '48%',    backgroundColor: '#f9f9f9',    borderRadius: 12,    padding: 16,    alignItems: 'center',    marginBottom: 12,  },  statNumber: {    fontSize: 20,    fontWeight: 'bold',    color: '#333',    marginVertical: 8,  },  statLabel: {    fontSize: 12,    color: '#666',    textAlign: 'center',  },  trendingSection: {    backgroundColor: '#fff',    padding: 20,    marginBottom: 8,  },  trendingPost: {    flexDirection: 'row',    alignItems: 'center',    paddingVertical: 12,    borderBottomWidth: 1,    borderBottomColor: '#f0f0f0',  },  trendingRank: {    width: 32,    height: 32,    borderRadius: 16,    backgroundColor: '#E8F5E8',    alignItems: 'center',    justifyContent: 'center',    marginRight: 12,  },  trendingNumber: {    fontSize: 14,    fontWeight: 'bold',    color: '#2E7D32',  },  trendingContent: {    flex: 1,    marginRight: 12,  },  trendingTitle: {    fontSize: 14,    fontWeight: '600',    color: '#333',    marginBottom: 4,  },  trendingAuthor: {    fontSize: 12,    color: '#666',  },  trendingStats: {    flexDirection: 'row',    alignItems: 'center',  },  trendingScore: {    fontSize: 12,    color: '#4CAF50',    marginLeft: 4,    fontWeight: '600',  },  featuresSection: {    backgroundColor: '#fff',    padding: 20,    marginBottom: 8,  },  featuresGrid: {    flexDirection: 'row',    flexWrap: 'wrap',    justifyContent: 'space-between',  },  featureCard: {    width: '48%',    backgroundColor: '#f9f9f9',    borderRadius: 12,    padding: 16,    marginBottom: 16,    alignItems: 'center',  },  featureIcon: {    width: 48,    height: 48,    borderRadius: 24,    alignItems: 'center',    justifyContent: 'center',    marginBottom: 12,  },  featureTitle: {    fontSize: 14,    fontWeight: 'bold',    color: '#333',    textAlign: 'center',    marginBottom: 8,  },  featureDescription: {    fontSize: 12,    color: '#666',    textAlign: 'center',    lineHeight: 16,  },  activitySection: {    backgroundColor: '#fff',    padding: 20,    marginBottom: 20,  },  getStartedCard: {    alignItems: 'center',    paddingVertical: 24,  },  getStartedTitle: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',    marginTop: 16,    marginBottom: 8,  },  getStartedText: {    fontSize: 14,    color: '#666',    textAlign: 'center',    lineHeight: 20,    marginBottom: 20,  },  getStartedButton: {    backgroundColor: '#2E7D32',    borderRadius: 8,    paddingHorizontal: 24,    paddingVertical: 12,  },  getStartedButtonText: {    color: '#fff',    fontSize: 14,    fontWeight: '600',  },  impactStats: {    flexDirection: 'row',    justifyContent: 'space-around',  },  impactStat: {    alignItems: 'center',  },  impactNumber: {    fontSize: 18,    fontWeight: 'bold',    color: '#333',    marginVertical: 8,  },  impactLabel: {    fontSize: 12,    color: '#666',  },  loadingContainer: {    flex: 1,    alignItems: 'center',    justifyContent: 'center',    backgroundColor: '#f5f5f5',  },  loadingText: {    marginTop: 16,    fontSize: 16,    color: '#666',  },});export default CommunityDashboard;