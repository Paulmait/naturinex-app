import React, { useState, useEffect, useCallback } from 'react';import {  View,  Text,  StyleSheet,  ScrollView,  RefreshControl,  TouchableOpacity,  Alert,  Switch,  Dimensions} from 'react-native';import { ProgressChart, BarChart } from 'react-native-chart-kit';import { MaterialIcons } from '@expo/vector-icons';import { Notifications } from 'expo-notifications';import HealthIntegrationService from '../services/HealthIntegrationService';import HealthDataModel from '../models/HealthDataModel';const { width: screenWidth } = Dimensions.get('window');/** * Medication Tracker Component * Tracks medication adherence and provides reminders */const MedicationTracker = ({ navigation }) => {  const [medications, setMedications] = useState([]);  const [todaysMedications, setTodaysMedications] = useState([]);  const [adherenceStats, setAdherenceStats] = useState({    todayCompliance: 0,    weeklyCompliance: 0,    monthlyCompliance: 0,    streakDays: 0  });  const [isLoading, setIsLoading] = useState(true);  const [refreshing, setRefreshing] = useState(false);  const [remindersEnabled, setRemindersEnabled] = useState(true);  const healthDataModel = new HealthDataModel();  useEffect(() => {    initializeMedicationTracker();  }, []);  const initializeMedicationTracker = async () => {    try {      setIsLoading(true);      await loadMedications();      await loadAdherenceData();      await setupNotifications();    } catch (error) {      console.error('Medication tracker initialization failed:', error);      Alert.alert('Error', 'Failed to initialize medication tracker');    } finally {      setIsLoading(false);    }  };  const loadMedications = async () => {    try {      // In a real app, this would load from a medical database or health service      // For now, using mock data      const mockMedications = [        {          id: '1',          name: 'Lisinopril',          dosage: '10mg',          frequency: 'Once daily',          time: '08:00',          instructions: 'Take with water, preferably with food',          prescribedBy: 'Dr. Smith',          startDate: '2024-01-01',          endDate: null,          isActive: true,          color: '#e74c3c'        },        {          id: '2',          name: 'Metformin',          dosage: '500mg',          frequency: 'Twice daily',          time: '08:00,20:00',          instructions: 'Take with meals',          prescribedBy: 'Dr. Johnson',          startDate: '2024-01-15',          endDate: null,          isActive: true,          color: '#3498db'        },        {          id: '3',          name: 'Vitamin D3',          dosage: '1000 IU',          frequency: 'Once daily',          time: '08:00',          instructions: 'Take with breakfast',          prescribedBy: 'Self-administered',          startDate: '2024-02-01',          endDate: null,          isActive: true,          color: '#f39c12'        }      ];      setMedications(mockMedications);      generateTodaysMedications(mockMedications);    } catch (error) {      console.error('Failed to load medications:', error);    }  };  const generateTodaysMedications = (medications) => {    const today = new Date();    const todaysMeds = [];    medications.forEach(medication => {      if (!medication.isActive) return;      const times = medication.time.split(',');      times.forEach(time => {        const [hour, minute] = time.split(':');        const scheduledTime = new Date(today);        scheduledTime.setHours(parseInt(hour), parseInt(minute), 0, 0);        // Generate mock adherence data        const adherenceHistory = generateMockAdherence(medication.id, 30);        const todayTaken = Math.random() > 0.2; // 80% compliance rate        todaysMeds.push({          id: `${medication.id}_${time}`,          medicationId: medication.id,          name: medication.name,          dosage: medication.dosage,          scheduledTime: scheduledTime,          taken: todayTaken,          takenTime: todayTaken ? new Date(scheduledTime.getTime() + (Math.random() - 0.5) * 3600000) : null,          color: medication.color,          instructions: medication.instructions,          adherenceHistory        });      });    });    // Sort by scheduled time    todaysMeds.sort((a, b) => a.scheduledTime - b.scheduledTime);    setTodaysMedications(todaysMeds);  };  const generateMockAdherence = (medicationId, days) => {    const adherence = [];    const today = new Date();    for (let i = days - 1; i >= 0; i--) {      const date = new Date(today);      date.setDate(date.getDate() - i);      // Simulate 85% adherence rate with some patterns      const compliance = Math.random() > 0.15;      adherence.push({        date: date.toISOString().split('T')[0],        taken: compliance,        onTime: compliance ? Math.random() > 0.1 : false // 90% on time when taken      });    }    return adherence;  };  const loadAdherenceData = async () => {    try {      // Calculate adherence statistics from mock data      if (todaysMedications.length === 0) return;      const todayCompliance = todaysMedications.filter(med => med.taken).length / todaysMedications.length * 100;      // Calculate weekly compliance      const weeklyData = todaysMedications[0]?.adherenceHistory?.slice(-7) || [];      const weeklyCompliance = weeklyData.filter(day => day.taken).length / weeklyData.length * 100;      // Calculate monthly compliance      const monthlyData = todaysMedications[0]?.adherenceHistory || [];      const monthlyCompliance = monthlyData.filter(day => day.taken).length / monthlyData.length * 100;      // Calculate streak      let streakDays = 0;      for (let i = monthlyData.length - 1; i >= 0; i--) {        if (monthlyData[i].taken) {          streakDays++;        } else {          break;        }      }      setAdherenceStats({        todayCompliance: todayCompliance || 0,        weeklyCompliance: weeklyCompliance || 0,        monthlyCompliance: monthlyCompliance || 0,        streakDays      });    } catch (error) {      console.error('Failed to load adherence data:', error);    }  };  const setupNotifications = async () => {    try {      const { status } = await Notifications.requestPermissionsAsync();      if (status !== 'granted') {        Alert.alert('Permission required', 'Notifications are needed for medication reminders');        return;      }      // Schedule notifications for each medication      medications.forEach(medication => {        if (medication.isActive && remindersEnabled) {          scheduleNotificationForMedication(medication);        }      });    } catch (error) {      console.error('Failed to setup notifications:', error);    }  };  const scheduleNotificationForMedication = async (medication) => {    try {      const times = medication.time.split(',');      for (const time of times) {        const [hour, minute] = time.split(':');        await Notifications.scheduleNotificationAsync({          content: {            title: 'Medication Reminder',            body: `Time to take ${medication.name} (${medication.dosage})`,            data: { medicationId: medication.id }          },          trigger: {            hour: parseInt(hour),            minute: parseInt(minute),            repeats: true          }        });      }    } catch (error) {      console.error('Failed to schedule notification:', error);    }  };  const onRefresh = useCallback(async () => {    setRefreshing(true);    try {      await loadMedications();      await loadAdherenceData();    } catch (error) {      console.error('Refresh failed:', error);      Alert.alert('Error', 'Failed to refresh medication data');    } finally {      setRefreshing(false);    }  }, []);  const markMedicationTaken = async (medicationSchedule) => {    try {      const updatedMedications = todaysMedications.map(med => {        if (med.id === medicationSchedule.id) {          return {            ...med,            taken: !med.taken,            takenTime: !med.taken ? new Date() : null          };        }        return med;      });      setTodaysMedications(updatedMedications);      // In a real app, this would save to the health service      const adherenceEntry = healthDataModel.createHealthDataEntry('medication', {        medicationId: medicationSchedule.medicationId,        name: medicationSchedule.name,        dosage: medicationSchedule.dosage,        taken: !medicationSchedule.taken,        scheduledTime: medicationSchedule.scheduledTime,        takenTime: !medicationSchedule.taken ? new Date() : null      }, {        timestamp: new Date().toISOString(),        source: 'manual'      });      // Recalculate adherence stats      await loadAdherenceData();      const message = !medicationSchedule.taken        ? `Marked ${medicationSchedule.name} as taken`        : `Marked ${medicationSchedule.name} as not taken`;      Alert.alert('Success', message);    } catch (error) {      Alert.alert('Error', 'Failed to update medication status');    }  };  const renderAdherenceStats = () => (    <View style={styles.statsContainer}>      <Text style={styles.sectionTitle}>Adherence Statistics</Text>      <View style={styles.statsGrid}>        <View style={styles.statCard}>          <Text style={styles.statValue}>{Math.round(adherenceStats.todayCompliance)}%</Text>          <Text style={styles.statLabel}>Today</Text>        </View>        <View style={styles.statCard}>          <Text style={styles.statValue}>{Math.round(adherenceStats.weeklyCompliance)}%</Text>          <Text style={styles.statLabel}>This Week</Text>        </View>        <View style={styles.statCard}>          <Text style={styles.statValue}>{Math.round(adherenceStats.monthlyCompliance)}%</Text>          <Text style={styles.statLabel}>This Month</Text>        </View>        <View style={styles.statCard}>          <Text style={styles.statValue}>{adherenceStats.streakDays}</Text>          <Text style={styles.statLabel}>Day Streak</Text>        </View>      </View>    </View>  );  const renderTodaysMedications = () => (    <View style={styles.todaysContainer}>      <Text style={styles.sectionTitle}>Today's Medications</Text>      {todaysMedications.map((med, index) => (        <View key={index} style={styles.medicationCard}>          <View style={styles.medicationInfo}>            <View style={styles.medicationHeader}>              <View style={[styles.medicationColor, { backgroundColor: med.color }]} />              <View style={styles.medicationDetails}>                <Text style={styles.medicationName}>{med.name}</Text>                <Text style={styles.medicationDosage}>{med.dosage}</Text>              </View>            </View>            <View style={styles.medicationTime}>              <Text style={styles.scheduledTime}>                {med.scheduledTime.toLocaleTimeString('en-US', {                  hour: '2-digit',                  minute: '2-digit'                })}              </Text>              {med.taken && med.takenTime && (                <Text style={styles.takenTime}>                  Taken at {med.takenTime.toLocaleTimeString('en-US', {                    hour: '2-digit',                    minute: '2-digit'                  })}                </Text>              )}            </View>          </View>          <TouchableOpacity            style={[              styles.medicationButton,              med.taken ? styles.medicationButtonTaken : styles.medicationButtonPending            ]}            onPress={() => markMedicationTaken(med)}          >            <MaterialIcons              name={med.taken ? 'check' : 'add'}              size={24}              color={med.taken ? '#2ecc71' : '#fff'}            />          </TouchableOpacity>        </View>      ))}    </View>  );  const renderAdherenceChart = () => {    if (todaysMedications.length === 0) return null;    const adherenceData = todaysMedications[0]?.adherenceHistory?.slice(-7) || [];    const chartData = {      labels: adherenceData.map(day => {        const date = new Date(day.date);        return date.toLocaleDateString('en-US', { weekday: 'short' });      }),      datasets: [{        data: adherenceData.map(day => day.taken ? 1 : 0),        color: (opacity = 1) => `rgba(46, 204, 113, ${opacity})`,        strokeWidth: 2      }]    };    const chartConfig = {      backgroundGradientFrom: '#fff',      backgroundGradientTo: '#fff',      color: (opacity = 1) => `rgba(46, 204, 113, ${opacity})`,      strokeWidth: 2,      barPercentage: 0.5,      useShadowColorFromDataset: false,      decimalPlaces: 0    };    return (      <View style={styles.chartContainer}>        <Text style={styles.chartTitle}>7-Day Adherence Trend</Text>        <BarChart          data={chartData}          width={screenWidth - 60}          height={220}          chartConfig={chartConfig}          verticalLabelRotation={30}        />      </View>    );  };  const renderMedicationsList = () => (    <View style={styles.medicationsContainer}>      <Text style={styles.sectionTitle}>All Medications</Text>      {medications.map((medication, index) => (        <View key={index} style={styles.medicationListCard}>          <View style={styles.medicationListInfo}>            <View style={[styles.medicationColor, { backgroundColor: medication.color }]} />            <View style={styles.medicationListDetails}>              <Text style={styles.medicationListName}>{medication.name}</Text>              <Text style={styles.medicationListDosage}>                {medication.dosage} - {medication.frequency}              </Text>              <Text style={styles.medicationListDoctor}>                Prescribed by: {medication.prescribedBy}              </Text>            </View>          </View>          <TouchableOpacity            style={styles.medicationEditButton}            onPress={() => navigation.navigate('EditMedication', { medication })}          >            <MaterialIcons name="edit" size={20} color="#4a90e2" />          </TouchableOpacity>        </View>      ))}    </View>  );  const renderSettings = () => (    <View style={styles.settingsContainer}>      <Text style={styles.sectionTitle}>Settings</Text>      <View style={styles.settingItem}>        <Text style={styles.settingLabel}>Medication Reminders</Text>        <Switch          value={remindersEnabled}          onValueChange={(value) => {            setRemindersEnabled(value);            if (value) {              setupNotifications();            } else {              Notifications.cancelAllScheduledNotificationsAsync();            }          }}          trackColor={{ false: '#ccc', true: '#4a90e2' }}          thumbColor={remindersEnabled ? '#fff' : '#f4f3f4'}        />      </View>    </View>  );  const renderQuickActions = () => (    <View style={styles.quickActionsContainer}>      <Text style={styles.sectionTitle}>Quick Actions</Text>      <View style={styles.quickActionsGrid}>        <TouchableOpacity          style={styles.quickActionButton}          onPress={() => navigation.navigate('AddMedication')}        >          <MaterialIcons name="add" size={24} color="#4a90e2" />          <Text style={styles.quickActionText}>Add Medication</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickActionButton}          onPress={() => navigation.navigate('MedicationHistory')}        >          <MaterialIcons name="history" size={24} color="#4a90e2" />          <Text style={styles.quickActionText}>History</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickActionButton}          onPress={() => navigation.navigate('PharmacyLocator')}        >          <MaterialIcons name="local-pharmacy" size={24} color="#4a90e2" />          <Text style={styles.quickActionText}>Find Pharmacy</Text>        </TouchableOpacity>        <TouchableOpacity          style={styles.quickActionButton}          onPress={() => navigation.navigate('MedicationReminders')}        >          <MaterialIcons name="notifications" size={24} color="#4a90e2" />          <Text style={styles.quickActionText}>Reminders</Text>        </TouchableOpacity>      </View>    </View>  );  if (isLoading) {    return (      <View style={styles.loadingContainer}>        <MaterialIcons name="medication" size={48} color="#4a90e2" />        <Text style={styles.loadingText}>Loading medication tracker...</Text>      </View>    );  }  return (    <ScrollView      style={styles.container}      refreshControl={        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />      }    >      {/* Header */}      <View style={styles.header}>        <Text style={styles.headerTitle}>Medication Tracker</Text>        <TouchableOpacity onPress={onRefresh}>          <MaterialIcons name="refresh" size={24} color="#4a90e2" />        </TouchableOpacity>      </View>      {/* Adherence Stats */}      {renderAdherenceStats()}      {/* Today's Medications */}      {renderTodaysMedications()}      {/* Adherence Chart */}      {renderAdherenceChart()}      {/* All Medications */}      {renderMedicationsList()}      {/* Settings */}      {renderSettings()}      {/* Quick Actions */}      {renderQuickActions()}    </ScrollView>  );};const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#f8f9fa'  },  loadingContainer: {    flex: 1,    justifyContent: 'center',    alignItems: 'center',    backgroundColor: '#f8f9fa'  },  loadingText: {    marginTop: 10,    fontSize: 16,    color: '#666'  },  header: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    padding: 20,    backgroundColor: '#fff',    borderBottomWidth: 1,    borderBottomColor: '#e9ecef'  },  headerTitle: {    fontSize: 24,    fontWeight: 'bold',    color: '#2c3e50'  },  statsContainer: {    marginHorizontal: 20,    marginTop: 20,    marginBottom: 10  },  sectionTitle: {    fontSize: 18,    fontWeight: 'bold',    color: '#2c3e50',    marginBottom: 12  },  statsGrid: {    flexDirection: 'row',    justifyContent: 'space-between'  },  statCard: {    flex: 1,    backgroundColor: '#fff',    borderRadius: 12,    padding: 16,    marginHorizontal: 2,    alignItems: 'center',    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  statValue: {    fontSize: 24,    fontWeight: 'bold',    color: '#2c3e50',    marginBottom: 4  },  statLabel: {    fontSize: 12,    color: '#666',    textAlign: 'center'  },  todaysContainer: {    marginHorizontal: 20,    marginBottom: 20  },  medicationCard: {    flexDirection: 'row',    backgroundColor: '#fff',    borderRadius: 12,    padding: 16,    marginBottom: 8,    alignItems: 'center',    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  medicationInfo: {    flex: 1  },  medicationHeader: {    flexDirection: 'row',    alignItems: 'center',    marginBottom: 8  },  medicationColor: {    width: 12,    height: 12,    borderRadius: 6,    marginRight: 12  },  medicationDetails: {    flex: 1  },  medicationName: {    fontSize: 16,    fontWeight: '600',    color: '#2c3e50'  },  medicationDosage: {    fontSize: 14,    color: '#666'  },  medicationTime: {    marginLeft: 24  },  scheduledTime: {    fontSize: 14,    fontWeight: '500',    color: '#4a90e2'  },  takenTime: {    fontSize: 12,    color: '#2ecc71',    marginTop: 2  },  medicationButton: {    width: 40,    height: 40,    borderRadius: 20,    justifyContent: 'center',    alignItems: 'center',    marginLeft: 10  },  medicationButtonPending: {    backgroundColor: '#4a90e2'  },  medicationButtonTaken: {    backgroundColor: '#e8f5e8',    borderWidth: 2,    borderColor: '#2ecc71'  },  chartContainer: {    backgroundColor: '#fff',    marginHorizontal: 20,    marginBottom: 20,    borderRadius: 12,    padding: 16,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  chartTitle: {    fontSize: 16,    fontWeight: 'bold',    color: '#2c3e50',    marginBottom: 10  },  medicationsContainer: {    marginHorizontal: 20,    marginBottom: 20  },  medicationListCard: {    flexDirection: 'row',    backgroundColor: '#fff',    borderRadius: 12,    padding: 16,    marginBottom: 8,    alignItems: 'center',    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  medicationListInfo: {    flex: 1,    flexDirection: 'row',    alignItems: 'center'  },  medicationListDetails: {    flex: 1  },  medicationListName: {    fontSize: 16,    fontWeight: '600',    color: '#2c3e50',    marginBottom: 2  },  medicationListDosage: {    fontSize: 14,    color: '#666',    marginBottom: 2  },  medicationListDoctor: {    fontSize: 12,    color: '#999'  },  medicationEditButton: {    padding: 8  },  settingsContainer: {    marginHorizontal: 20,    marginBottom: 20  },  settingItem: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    backgroundColor: '#fff',    borderRadius: 12,    padding: 16,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  settingLabel: {    fontSize: 16,    color: '#2c3e50'  },  quickActionsContainer: {    marginHorizontal: 20,    marginBottom: 30  },  quickActionsGrid: {    flexDirection: 'row',    flexWrap: 'wrap',    justifyContent: 'space-between'  },  quickActionButton: {    width: '48%',    backgroundColor: '#fff',    padding: 16,    borderRadius: 12,    alignItems: 'center',    marginBottom: 10,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 4,    elevation: 3  },  quickActionText: {    fontSize: 12,    color: '#4a90e2',    marginTop: 4,    fontWeight: '500'  }});export default MedicationTracker;