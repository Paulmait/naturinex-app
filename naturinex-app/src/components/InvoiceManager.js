/** * Invoice Management Component * Comprehensive invoice management with download, preview, and dispute features */import React, { useState, useEffect } from 'react';import {  Box,  Card,  CardContent,  Typography,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  TablePagination,  Paper,  Chip,  IconButton,  Button,  TextField,  Select,  MenuItem,  FormControl,  InputLabel,  Grid,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  Alert,  Tooltip,  CircularProgress,  Divider,  List,  ListItem,  ListItemText,  ListItemIcon,  Collapse,  Badge} from '@mui/material';import {  Receipt,  Download,  Visibility,  Print,  Email,  Warning,  CheckCircle,  Cancel,  ExpandMore,  ExpandLess,  AttachMoney,  CalendarToday,  Description,  CreditCard,  Refresh,  FilterList,  Search} from '@mui/icons-material';import { DatePicker } from '@mui/x-date-pickers/DatePicker';import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';import { supabase } from '../config/supabase';import subscriptionManager from '../services/subscriptionManager';const InvoiceManager = ({ userId }) => {  const [invoices, setInvoices] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [page, setPage] = useState(0);  const [rowsPerPage, setRowsPerPage] = useState(10);  // Filters  const [statusFilter, setStatusFilter] = useState('all');  const [searchTerm, setSearchTerm] = useState('');  const [dateFrom, setDateFrom] = useState(null);  const [dateTo, setDateTo] = useState(null);  const [amountFrom, setAmountFrom] = useState('');  const [amountTo, setAmountTo] = useState('');  // Dialog states  const [selectedInvoice, setSelectedInvoice] = useState(null);  const [detailDialogOpen, setDetailDialogOpen] = useState(false);  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);  const [disputeDialogOpen, setDisputeDialogOpen] = useState(false);  const [emailDialogOpen, setEmailDialogOpen] = useState(false);  // Dispute form  const [disputeReason, setDisputeReason] = useState('');  const [disputeDescription, setDisputeDescription] = useState('');  // Email form  const [emailRecipient, setEmailRecipient] = useState('');  const [emailSubject, setEmailSubject] = useState('');  const [emailMessage, setEmailMessage] = useState('');  // Expanded rows for line items  const [expandedRows, setExpandedRows] = useState(new Set());  useEffect(() => {    if (userId) {      loadInvoices();    }  }, [userId]);  const loadInvoices = async () => {    try {      setLoading(true);      const { data, error } = await supabase        .from('invoices')        .select('*')        .eq('user_id', userId)        .order('created_at', { ascending: false });      if (error) throw error;      setInvoices(data || []);    } catch (error) {      setError('Failed to load invoices');      console.error('Error loading invoices:', error);    } finally {      setLoading(false);    }  };  // Filter invoices based on current filters  const filteredInvoices = invoices.filter((invoice) => {    // Status filter    if (statusFilter !== 'all' && invoice.status !== statusFilter) {      return false;    }    // Search filter    if (searchTerm) {      const searchLower = searchTerm.toLowerCase();      if (!invoice.invoice_number?.toLowerCase().includes(searchLower) &&          !invoice.description?.toLowerCase().includes(searchLower) &&          !invoice.stripe_invoice_id?.toLowerCase().includes(searchLower)) {        return false;      }    }    // Date range filter    const invoiceDate = new Date(invoice.created_at);    if (dateFrom && invoiceDate < dateFrom) return false;    if (dateTo && invoiceDate > dateTo) return false;    // Amount range filter    const amount = invoice.amount / 100; // Convert from cents    if (amountFrom && amount < parseFloat(amountFrom)) return false;    if (amountTo && amount > parseFloat(amountTo)) return false;    return true;  });  // Pagination  const paginatedInvoices = filteredInvoices.slice(    page * rowsPerPage,    page * rowsPerPage + rowsPerPage  );  const handleDownloadInvoice = async (invoiceId) => {    try {      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/download-invoice/${invoiceId}`, {        headers: {          'Authorization': `Bearer ${await subscriptionManager.getAuthToken()}`        }      });      if (response.ok) {        const blob = await response.blob();        const url = window.URL.createObjectURL(blob);        const a = document.createElement('a');        a.href = url;        a.download = `invoice-${invoiceId}.pdf`;        document.body.appendChild(a);        a.click();        window.URL.revokeObjectURL(url);        document.body.removeChild(a);      } else {        throw new Error('Failed to download invoice');      }    } catch (error) {      setError('Failed to download invoice');      console.error('Error downloading invoice:', error);    }  };  const handlePreviewInvoice = async (invoice) => {    setSelectedInvoice(invoice);    setPreviewDialogOpen(true);  };  const handlePrintInvoice = async (invoiceId) => {    try {      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/download-invoice/${invoiceId}`, {        headers: {          'Authorization': `Bearer ${await subscriptionManager.getAuthToken()}`        }      });      if (response.ok) {        const blob = await response.blob();        const url = window.URL.createObjectURL(blob);        const printWindow = window.open(url);        printWindow.onload = () => {          printWindow.print();        };      } else {        throw new Error('Failed to load invoice for printing');      }    } catch (error) {      setError('Failed to print invoice');      console.error('Error printing invoice:', error);    }  };  const handleEmailInvoice = (invoice) => {    setSelectedInvoice(invoice);    setEmailRecipient('');    setEmailSubject(`Invoice ${invoice.invoice_number}`);    setEmailMessage(`Please find attached your invoice ${invoice.invoice_number} for ${formatCurrency(invoice.amount, invoice.currency)}.`);    setEmailDialogOpen(true);  };  const handleSendEmail = async () => {    try {      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/email-invoice`, {        method: 'POST',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${await subscriptionManager.getAuthToken()}`        },        body: JSON.stringify({          invoiceId: selectedInvoice.stripe_invoice_id,          recipient: emailRecipient,          subject: emailSubject,          message: emailMessage        })      });      if (response.ok) {        setEmailDialogOpen(false);        // Show success message      } else {        throw new Error('Failed to send email');      }    } catch (error) {      setError('Failed to send invoice email');      console.error('Error sending invoice email:', error);    }  };  const handleDisputeInvoice = (invoice) => {    setSelectedInvoice(invoice);    setDisputeReason('');    setDisputeDescription('');    setDisputeDialogOpen(true);  };  const handleSubmitDispute = async () => {    try {      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/dispute-invoice`, {        method: 'POST',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${await subscriptionManager.getAuthToken()}`        },        body: JSON.stringify({          invoiceId: selectedInvoice.stripe_invoice_id,          reason: disputeReason,          description: disputeDescription        })      });      if (response.ok) {        setDisputeDialogOpen(false);        await loadInvoices(); // Reload to show updated status      } else {        throw new Error('Failed to submit dispute');      }    } catch (error) {      setError('Failed to submit dispute');      console.error('Error submitting dispute:', error);    }  };  const toggleRowExpansion = (invoiceId) => {    const newExpanded = new Set(expandedRows);    if (newExpanded.has(invoiceId)) {      newExpanded.delete(invoiceId);    } else {      newExpanded.add(invoiceId);    }    setExpandedRows(newExpanded);  };  const clearFilters = () => {    setStatusFilter('all');    setSearchTerm('');    setDateFrom(null);    setDateTo(null);    setAmountFrom('');    setAmountTo('');    setPage(0);  };  const formatCurrency = (amount, currency = 'USD') => {    return new Intl.NumberFormat('en-US', {      style: 'currency',      currency: currency.toUpperCase()    }).format(amount / 100);  };  const formatDate = (date) => {    return new Date(date).toLocaleDateString('en-US', {      year: 'numeric',      month: 'short',      day: 'numeric'    });  };  const getStatusColor = (status) => {    switch (status) {      case 'paid': return 'success';      case 'open': return 'info';      case 'void': return 'default';      case 'uncollectible': return 'error';      case 'draft': return 'warning';      default: return 'default';    }  };  const getStatusIcon = (status) => {    switch (status) {      case 'paid': return <CheckCircle />;      case 'open': return <Warning />;      case 'void': return <Cancel />;      case 'uncollectible': return <Warning />;      default: return <Description />;    }  };  // Calculate summary statistics  const summaryStats = {    totalInvoices: filteredInvoices.length,    totalAmount: filteredInvoices.reduce((sum, inv) => sum + inv.amount, 0),    paidAmount: filteredInvoices.filter(inv => inv.status === 'paid').reduce((sum, inv) => sum + inv.amount, 0),    pendingAmount: filteredInvoices.filter(inv => inv.status === 'open').reduce((sum, inv) => sum + inv.amount, 0)  };  if (loading) {    return (      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>        <CircularProgress />      </Box>    );  }  return (    <LocalizationProvider dateAdapter={AdapterDateFns}>      <Box>        <Card>          <CardContent>            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>              <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>                <Receipt />                Invoice Management              </Typography>              <Box sx={{ display: 'flex', gap: 1 }}>                <Button                  variant="outlined"                  startIcon={<FilterList />}                  onClick={clearFilters}                  size="small"                >                  Clear Filters                </Button>                <IconButton onClick={loadInvoices} size="small">                  <Refresh />                </IconButton>              </Box>            </Box>            {error && (              <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>                {error}              </Alert>            )}            {/* Summary Statistics */}            <Grid container spacing={2} sx={{ mb: 3 }}>              <Grid item xs={12} sm={6} md={3}>                <Card variant="outlined">                  <CardContent sx={{ textAlign: 'center', py: 2 }}>                    <Typography variant="h6">                      {summaryStats.totalInvoices}                    </Typography>                    <Typography variant="body2" color="text.secondary">                      Total Invoices                    </Typography>                  </CardContent>                </Card>              </Grid>              <Grid item xs={12} sm={6} md={3}>                <Card variant="outlined">                  <CardContent sx={{ textAlign: 'center', py: 2 }}>                    <Typography variant="h6">                      {formatCurrency(summaryStats.totalAmount)}                    </Typography>                    <Typography variant="body2" color="text.secondary">                      Total Amount                    </Typography>                  </CardContent>                </Card>              </Grid>              <Grid item xs={12} sm={6} md={3}>                <Card variant="outlined">                  <CardContent sx={{ textAlign: 'center', py: 2 }}>                    <Typography variant="h6" color="success.main">                      {formatCurrency(summaryStats.paidAmount)}                    </Typography>                    <Typography variant="body2" color="text.secondary">                      Paid Amount                    </Typography>                  </CardContent>                </Card>              </Grid>              <Grid item xs={12} sm={6} md={3}>                <Card variant="outlined">                  <CardContent sx={{ textAlign: 'center', py: 2 }}>                    <Typography variant="h6" color="warning.main">                      {formatCurrency(summaryStats.pendingAmount)}                    </Typography>                    <Typography variant="body2" color="text.secondary">                      Pending Amount                    </Typography>                  </CardContent>                </Card>              </Grid>            </Grid>            {/* Filters */}            <Card variant="outlined" sx={{ mb: 3 }}>              <CardContent>                <Typography variant="subtitle1" gutterBottom>                  Filters                </Typography>                <Grid container spacing={2}>                  <Grid item xs={12} sm={6} md={2}>                    <TextField                      fullWidth                      label="Search"                      variant="outlined"                      size="small"                      value={searchTerm}                      onChange={(e) => setSearchTerm(e.target.value)}                      InputProps={{                        startAdornment: <Search sx={{ mr: 1, color: 'text.secondary' }} />                      }}                    />                  </Grid>                  <Grid item xs={12} sm={6} md={2}>                    <FormControl fullWidth size="small">                      <InputLabel>Status</InputLabel>                      <Select                        value={statusFilter}                        onChange={(e) => setStatusFilter(e.target.value)}                        label="Status"                      >                        <MenuItem value="all">All Statuses</MenuItem>                        <MenuItem value="paid">Paid</MenuItem>                        <MenuItem value="open">Open</MenuItem>                        <MenuItem value="draft">Draft</MenuItem>                        <MenuItem value="void">Void</MenuItem>                        <MenuItem value="uncollectible">Uncollectible</MenuItem>                      </Select>                    </FormControl>                  </Grid>                  <Grid item xs={12} sm={6} md={2}>                    <DatePicker                      label="From Date"                      value={dateFrom}                      onChange={setDateFrom}                      renderInput={(params) => <TextField {...params} size="small" fullWidth />}                    />                  </Grid>                  <Grid item xs={12} sm={6} md={2}>                    <DatePicker                      label="To Date"                      value={dateTo}                      onChange={setDateTo}                      renderInput={(params) => <TextField {...params} size="small" fullWidth />}                    />                  </Grid>                  <Grid item xs={12} sm={6} md={2}>                    <TextField                      fullWidth                      label="Min Amount ($)"                      variant="outlined"                      size="small"                      type="number"                      value={amountFrom}                      onChange={(e) => setAmountFrom(e.target.value)}                    />                  </Grid>                  <Grid item xs={12} sm={6} md={2}>                    <TextField                      fullWidth                      label="Max Amount ($)"                      variant="outlined"                      size="small"                      type="number"                      value={amountTo}                      onChange={(e) => setAmountTo(e.target.value)}                    />                  </Grid>                </Grid>              </CardContent>            </Card>            {/* Invoices Table */}            <TableContainer component={Paper} variant="outlined">              <Table>                <TableHead>                  <TableRow>                    <TableCell></TableCell>                    <TableCell>Invoice #</TableCell>                    <TableCell>Date</TableCell>                    <TableCell>Amount</TableCell>                    <TableCell>Status</TableCell>                    <TableCell>Period</TableCell>                    <TableCell>Due Date</TableCell>                    <TableCell>Actions</TableCell>                  </TableRow>                </TableHead>                <TableBody>                  {paginatedInvoices.length > 0 ? (                    paginatedInvoices.map((invoice) => (                      <React.Fragment key={invoice.id}>                        <TableRow hover>                          <TableCell>                            <IconButton                              size="small"                              onClick={() => toggleRowExpansion(invoice.id)}                            >                              {expandedRows.has(invoice.id) ? <ExpandLess /> : <ExpandMore />}                            </IconButton>                          </TableCell>                          <TableCell>                            <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>                              {invoice.invoice_number || invoice.stripe_invoice_id?.substring(0, 8) + '...'}                            </Typography>                          </TableCell>                          <TableCell>{formatDate(invoice.created_at)}</TableCell>                          <TableCell>                            <Typography variant="body2" fontWeight="medium">                              {formatCurrency(invoice.amount, invoice.currency)}                            </Typography>                          </TableCell>                          <TableCell>                            <Chip                              icon={getStatusIcon(invoice.status)}                              label={invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}                              color={getStatusColor(invoice.status)}                              size="small"                            />                          </TableCell>                          <TableCell>                            {invoice.period_start && invoice.period_end ? (                              <Typography variant="body2">                                {formatDate(invoice.period_start)} - {formatDate(invoice.period_end)}                              </Typography>                            ) : (                              '-'                            )}                          </TableCell>                          <TableCell>                            {invoice.due_date ? formatDate(invoice.due_date) : '-'}                          </TableCell>                          <TableCell>                            <Box sx={{ display: 'flex', gap: 0.5 }}>                              <Tooltip title="View Details">                                <IconButton                                  size="small"                                  onClick={() => handlePreviewInvoice(invoice)}                                >                                  <Visibility />                                </IconButton>                              </Tooltip>                              <Tooltip title="Download PDF">                                <IconButton                                  size="small"                                  onClick={() => handleDownloadInvoice(invoice.stripe_invoice_id)}                                >                                  <Download />                                </IconButton>                              </Tooltip>                              <Tooltip title="Print">                                <IconButton                                  size="small"                                  onClick={() => handlePrintInvoice(invoice.stripe_invoice_id)}                                >                                  <Print />                                </IconButton>                              </Tooltip>                              <Tooltip title="Email">                                <IconButton                                  size="small"                                  onClick={() => handleEmailInvoice(invoice)}                                >                                  <Email />                                </IconButton>                              </Tooltip>                              {invoice.status === 'paid' && (                                <Tooltip title="Dispute">                                  <IconButton                                    size="small"                                    onClick={() => handleDisputeInvoice(invoice)}                                    color="error"                                  >                                    <Warning />                                  </IconButton>                                </Tooltip>                              )}                            </Box>                          </TableCell>                        </TableRow>                        {/* Expandable Row for Line Items */}                        <TableRow>                          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={8}>                            <Collapse in={expandedRows.has(invoice.id)} timeout="auto" unmountOnExit>                              <Box sx={{ margin: 1 }}>                                <Typography variant="h6" gutterBottom component="div">                                  Invoice Details                                </Typography>                                <Grid container spacing={2}>                                  <Grid item xs={12} md={6}>                                    <Typography variant="subtitle2">Description</Typography>                                    <Typography variant="body2" sx={{ mb: 2 }}>                                      {invoice.description || 'No description available'}                                    </Typography>                                    <Typography variant="subtitle2">Payment Method</Typography>                                    <Typography variant="body2" sx={{ mb: 2 }}>                                      {invoice.payment_method_id || 'Default payment method'}                                    </Typography>                                  </Grid>                                  <Grid item xs={12} md={6}>                                    <Typography variant="subtitle2">Amount Breakdown</Typography>                                    <List dense>                                      <ListItem>                                        <ListItemText                                          primary="Subtotal"                                          secondary={formatCurrency(invoice.amount, invoice.currency)}                                        />                                      </ListItem>                                      <ListItem>                                        <ListItemText                                          primary="Amount Paid"                                          secondary={formatCurrency(invoice.amount_paid, invoice.currency)}                                        />                                      </ListItem>                                      <ListItem>                                        <ListItemText                                          primary="Amount Due"                                          secondary={formatCurrency(invoice.amount_due, invoice.currency)}                                        />                                      </ListItem>                                    </List>                                  </Grid>                                </Grid>                                {/* Line Items */}                                {invoice.line_items && invoice.line_items.length > 0 && (                                  <Box sx={{ mt: 2 }}>                                    <Typography variant="subtitle2" gutterBottom>                                      Line Items                                    </Typography>                                    <Table size="small">                                      <TableHead>                                        <TableRow>                                          <TableCell>Description</TableCell>                                          <TableCell>Quantity</TableCell>                                          <TableCell>Unit Price</TableCell>                                          <TableCell>Amount</TableCell>                                        </TableRow>                                      </TableHead>                                      <TableBody>                                        {invoice.line_items.map((item, index) => (                                          <TableRow key={index}>                                            <TableCell>{item.description}</TableCell>                                            <TableCell>{item.quantity}</TableCell>                                            <TableCell>{formatCurrency(item.unit_amount, invoice.currency)}</TableCell>                                            <TableCell>{formatCurrency(item.amount, invoice.currency)}</TableCell>                                          </TableRow>                                        ))}                                      </TableBody>                                    </Table>                                  </Box>                                )}                              </Box>                            </Collapse>                          </TableCell>                        </TableRow>                      </React.Fragment>                    ))                  ) : (                    <TableRow>                      <TableCell colSpan={8} align="center">                        <Box sx={{ py: 4 }}>                          <Receipt sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />                          <Typography variant="h6" color="text.secondary" gutterBottom>                            No invoices found                          </Typography>                          <Typography variant="body2" color="text.secondary">                            {invoices.length === 0                              ? 'You haven\'t received any invoices yet'                              : 'No invoices match your current filters'                            }                          </Typography>                        </Box>                      </TableCell>                    </TableRow>                  )}                </TableBody>              </Table>            </TableContainer>            {/* Pagination */}            {filteredInvoices.length > 0 && (              <TablePagination                component="div"                count={filteredInvoices.length}                page={page}                onPageChange={(event, newPage) => setPage(newPage)}                rowsPerPage={rowsPerPage}                onRowsPerPageChange={(event) => {                  setRowsPerPage(parseInt(event.target.value, 10));                  setPage(0);                }}                rowsPerPageOptions={[5, 10, 25, 50]}              />            )}          </CardContent>        </Card>        {/* Invoice Preview Dialog */}        <Dialog open={previewDialogOpen} onClose={() => setPreviewDialogOpen(false)} maxWidth="md" fullWidth>          <DialogTitle>Invoice Preview</DialogTitle>          <DialogContent>            {selectedInvoice && (              <Box>                <Grid container spacing={2}>                  <Grid item xs={12} sm={6}>                    <Typography variant="h6">Invoice #{selectedInvoice.invoice_number}</Typography>                    <Typography variant="body2" color="text.secondary">                      {formatDate(selectedInvoice.created_at)}                    </Typography>                  </Grid>                  <Grid item xs={12} sm={6} sx={{ textAlign: 'right' }}>                    <Typography variant="h5">                      {formatCurrency(selectedInvoice.amount, selectedInvoice.currency)}                    </Typography>                    <Chip                      label={selectedInvoice.status}                      color={getStatusColor(selectedInvoice.status)}                    />                  </Grid>                </Grid>                <Divider sx={{ my: 2 }} />                <Typography variant="body1">                  {selectedInvoice.description || 'Subscription payment'}                </Typography>                {selectedInvoice.period_start && selectedInvoice.period_end && (                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>                    Billing Period: {formatDate(selectedInvoice.period_start)} - {formatDate(selectedInvoice.period_end)}                  </Typography>                )}              </Box>            )}          </DialogContent>          <DialogActions>            <Button onClick={() => setPreviewDialogOpen(false)}>Close</Button>            {selectedInvoice && (              <>                <Button                  onClick={() => handleDownloadInvoice(selectedInvoice.stripe_invoice_id)}                  startIcon={<Download />}                >                  Download                </Button>                <Button                  onClick={() => handlePrintInvoice(selectedInvoice.stripe_invoice_id)}                  startIcon={<Print />}                >                  Print                </Button>              </>            )}          </DialogActions>        </Dialog>        {/* Email Dialog */}        <Dialog open={emailDialogOpen} onClose={() => setEmailDialogOpen(false)} maxWidth="sm" fullWidth>          <DialogTitle>Email Invoice</DialogTitle>          <DialogContent>            <Grid container spacing={2} sx={{ mt: 1 }}>              <Grid item xs={12}>                <TextField                  fullWidth                  label="Recipient Email"                  type="email"                  value={emailRecipient}                  onChange={(e) => setEmailRecipient(e.target.value)}                  required                />              </Grid>              <Grid item xs={12}>                <TextField                  fullWidth                  label="Subject"                  value={emailSubject}                  onChange={(e) => setEmailSubject(e.target.value)}                  required                />              </Grid>              <Grid item xs={12}>                <TextField                  fullWidth                  label="Message"                  multiline                  rows={4}                  value={emailMessage}                  onChange={(e) => setEmailMessage(e.target.value)}                />              </Grid>            </Grid>          </DialogContent>          <DialogActions>            <Button onClick={() => setEmailDialogOpen(false)}>Cancel</Button>            <Button              onClick={handleSendEmail}              variant="contained"              disabled={!emailRecipient || !emailSubject}            >              Send Email            </Button>          </DialogActions>        </Dialog>        {/* Dispute Dialog */}        <Dialog open={disputeDialogOpen} onClose={() => setDisputeDialogOpen(false)} maxWidth="sm" fullWidth>          <DialogTitle>Dispute Invoice</DialogTitle>          <DialogContent>            <Alert severity="warning" sx={{ mb: 2 }}>              Disputing an invoice will initiate a review process. Please provide detailed information about your concern.            </Alert>            <Grid container spacing={2}>              <Grid item xs={12}>                <FormControl fullWidth>                  <InputLabel>Dispute Reason</InputLabel>                  <Select                    value={disputeReason}                    onChange={(e) => setDisputeReason(e.target.value)}                    label="Dispute Reason"                  >                    <MenuItem value="duplicate">Duplicate charge</MenuItem>                    <MenuItem value="fraudulent">Fraudulent charge</MenuItem>                    <MenuItem value="subscription_canceled">Subscription was canceled</MenuItem>                    <MenuItem value="product_unacceptable">Product unacceptable</MenuItem>                    <MenuItem value="product_not_received">Product not received</MenuItem>                    <MenuItem value="unrecognized">Unrecognized charge</MenuItem>                    <MenuItem value="credit_not_processed">Credit not processed</MenuItem>                    <MenuItem value="other">Other</MenuItem>                  </Select>                </FormControl>              </Grid>              <Grid item xs={12}>                <TextField                  fullWidth                  label="Description"                  multiline                  rows={4}                  value={disputeDescription}                  onChange={(e) => setDisputeDescription(e.target.value)}                  placeholder="Please provide detailed information about your dispute..."                  required                />              </Grid>            </Grid>          </DialogContent>          <DialogActions>            <Button onClick={() => setDisputeDialogOpen(false)}>Cancel</Button>            <Button              onClick={handleSubmitDispute}              variant="contained"              color="error"              disabled={!disputeReason || !disputeDescription}            >              Submit Dispute            </Button>          </DialogActions>        </Dialog>      </Box>    </LocalizationProvider>  );};export default InvoiceManager;