import React, { useState } from 'react';import { db } from '../firebase';import { collection, addDoc } from 'firebase/firestore';import analytics, { trackEvent } from '../utils/analytics';function BetaFeedback({ user, onClose }) {  const [feedback, setFeedback] = useState({    rating: 5,    experience: '',    features: {      easeOfUse: 5,      scanAccuracy: 5,      aiQuality: 5,      mobileExperience: 5,      speed: 5    },    suggestions: '',    bugs: '',    wouldRecommend: true,    testingDevice: '',    testingMethod: 'android-studio' // android-studio, ios, browser  });  const [isSubmitting, setIsSubmitting] = useState(false);  const [submitted, setSubmitted] = useState(false);  const handleFeatureRating = (feature, rating) => {    setFeedback(prev => ({      ...prev,      features: {        ...prev.features,        [feature]: rating      }    }));  };  const handleSubmit = async (e) => {    e.preventDefault();    setIsSubmitting(true);    try {      // Submit feedback to Firestore      await addDoc(collection(db, 'beta_feedback'), {        ...feedback,        userId: user?.uid || 'anonymous',        userEmail: user?.email || 'anonymous',        timestamp: new Date(),        deviceInfo: {          userAgent: navigator.userAgent,          screenSize: `${window.screen?.width || 'unknown'}x${window.screen?.height || 'unknown'}`,          viewport: `${window.innerWidth}x${window.innerHeight}`,          platform: navigator.platform,          language: navigator.language        },        sessionData: {          deviceId: analytics.deviceId,          sessionId: analytics.sessionId        }      });      // Track feedback submission      await trackEvent('beta_feedback_submitted', {        rating: feedback.rating,        wouldRecommend: feedback.wouldRecommend,        testingMethod: feedback.testingMethod,        userId: user?.uid      });      setSubmitted(true);    } catch (error) {      console.error('Error submitting feedback:', error);      alert('Error submitting feedback. Please try again.');    } finally {      setIsSubmitting(false);    }  };  if (submitted) {    return (      <div style={{        position: 'fixed',        top: 0,        left: 0,        right: 0,        bottom: 0,        backgroundColor: 'rgba(0,0,0,0.8)',        display: 'flex',        justifyContent: 'center',        alignItems: 'center',        zIndex: 2000      }}>        <div style={{          backgroundColor: 'white',          borderRadius: '15px',          padding: '30px',          maxWidth: '400px',          margin: '20px',          textAlign: 'center'        }}>          <div style={{ fontSize: '48px', marginBottom: '20px' }}>üéâ</div>          <h2 style={{ color: '#2c5530', marginBottom: '15px' }}>Thank You!</h2>          <p style={{ color: '#666', marginBottom: '20px' }}>            Your feedback has been submitted and will help improve Naturinex!          </p>          <button onClick={onClose} style={{            backgroundColor: '#2c5530',            color: 'white',            border: 'none',            padding: '12px 24px',            borderRadius: '8px',            cursor: 'pointer',            fontSize: '16px'          }}>            Continue Testing          </button>        </div>      </div>    );  }  const StarRating = ({ value, onChange, label }) => (    <div style={{ marginBottom: '15px' }}>      <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>        {label}      </label>      <div style={{ display: 'flex', gap: '5px' }}>        {[1, 2, 3, 4, 5].map(star => (          <button            key={star}            type="button"            onClick={() => onChange(star)}            style={{              background: 'none',              border: 'none',              fontSize: '24px',              cursor: 'pointer',              color: star <= value ? '#ffd700' : '#ddd'            }}          >            ‚≠ê          </button>        ))}      </div>    </div>  );  return (    <div style={{      position: 'fixed',      top: 0,      left: 0,      right: 0,      bottom: 0,      backgroundColor: 'rgba(0,0,0,0.8)',      display: 'flex',      justifyContent: 'center',      alignItems: 'center',      zIndex: 2000,      padding: '20px'    }}>      <div style={{        backgroundColor: 'white',        borderRadius: '15px',        padding: '25px',        maxWidth: '500px',        maxHeight: '90vh',        overflowY: 'auto',        width: '100%'      }}>        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>          <h2 style={{ color: '#2c5530', margin: 0 }}>üß™ Beta Feedback</h2>          <button onClick={onClose} style={{            background: 'none',            border: 'none',            fontSize: '24px',            cursor: 'pointer',            color: '#999'          }}>√ó</button>        </div>        <form onSubmit={handleSubmit}>          {/* Overall Rating */}          <StarRating             value={feedback.rating}            onChange={(rating) => setFeedback(prev => ({ ...prev, rating }))}            label="Overall Experience"          />          {/* Feature Ratings */}          <div style={{ marginBottom: '20px' }}>            <h3 style={{ color: '#2c5530', fontSize: '16px', marginBottom: '15px' }}>Rate Features</h3>            <StarRating               value={feedback.features.easeOfUse}              onChange={(rating) => handleFeatureRating('easeOfUse', rating)}              label="Ease of Use"            />            <StarRating               value={feedback.features.scanAccuracy}              onChange={(rating) => handleFeatureRating('scanAccuracy', rating)}              label="Scan Accuracy"            />            <StarRating               value={feedback.features.aiQuality}              onChange={(rating) => handleFeatureRating('aiQuality', rating)}              label="AI Suggestions Quality"            />            <StarRating               value={feedback.features.mobileExperience}              onChange={(rating) => handleFeatureRating('mobileExperience', rating)}              label="Mobile Experience"            />            <StarRating               value={feedback.features.speed}              onChange={(rating) => handleFeatureRating('speed', rating)}              label="App Speed"            />          </div>          {/* Testing Method */}          <div style={{ marginBottom: '15px' }}>            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>              Testing Method            </label>            <select               value={feedback.testingMethod}              onChange={(e) => setFeedback(prev => ({ ...prev, testingMethod: e.target.value }))}              style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}            >              <option value="android-studio">Android Studio WebView</option>              <option value="ios">iPhone/iPad</option>              <option value="browser">Desktop Browser</option>              <option value="android-browser">Android Browser</option>            </select>          </div>          {/* Device Info */}          <div style={{ marginBottom: '15px' }}>            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>              Device/Browser Used            </label>            <input              type="text"              value={feedback.testingDevice}              onChange={(e) => setFeedback(prev => ({ ...prev, testingDevice: e.target.value }))}              placeholder="e.g., iPhone 14, Chrome on Windows, Android Studio..."              style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}            />          </div>          {/* Experience */}          <div style={{ marginBottom: '15px' }}>            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>              Describe Your Experience            </label>            <textarea              value={feedback.experience}              onChange={(e) => setFeedback(prev => ({ ...prev, experience: e.target.value }))}              placeholder="What did you like? What was confusing?"              rows={3}              style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', resize: 'vertical' }}            />          </div>          {/* Suggestions */}          <div style={{ marginBottom: '15px' }}>            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>              Suggestions for Improvement            </label>            <textarea              value={feedback.suggestions}              onChange={(e) => setFeedback(prev => ({ ...prev, suggestions: e.target.value }))}              placeholder="What features would you add or change?"              rows={3}              style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', resize: 'vertical' }}            />          </div>          {/* Bugs */}          <div style={{ marginBottom: '15px' }}>            <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '5px', fontSize: '14px' }}>              Any Bugs or Issues?            </label>            <textarea              value={feedback.bugs}              onChange={(e) => setFeedback(prev => ({ ...prev, bugs: e.target.value }))}              placeholder="Describe any errors, crashes, or unexpected behavior"              rows={3}              style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', resize: 'vertical' }}            />          </div>          {/* Would Recommend */}          <div style={{ marginBottom: '20px' }}>            <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px' }}>              <input                type="checkbox"                checked={feedback.wouldRecommend}                onChange={(e) => setFeedback(prev => ({ ...prev, wouldRecommend: e.target.checked }))}                style={{ marginRight: '8px' }}              />              I would recommend this app to others            </label>          </div>          <div style={{ display: 'flex', gap: '10px' }}>            <button type="button" onClick={onClose} style={{              flex: 1,              backgroundColor: '#f5f5f5',              color: '#666',              border: 'none',              padding: '12px',              borderRadius: '8px',              cursor: 'pointer',              fontSize: '14px'            }}>              Cancel            </button>            <button type="submit" disabled={isSubmitting} style={{              flex: 2,              backgroundColor: '#2c5530',              color: 'white',              border: 'none',              padding: '12px',              borderRadius: '8px',              cursor: 'pointer',              fontSize: '14px',              opacity: isSubmitting ? 0.7 : 1            }}>              {isSubmitting ? 'Submitting...' : 'Submit Feedback'}            </button>          </div>        </form>      </div>    </div>  );}export default BetaFeedback;