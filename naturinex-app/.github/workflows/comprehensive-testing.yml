name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_performance_tests:
        description: 'Run Performance Tests'
        required: false
        default: true
        type: boolean
      run_security_tests:
        description: 'Run Security Tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  API_BASE_URL: ${{ secrets.API_BASE_URL }}
  TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
  TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      test-matrix: ${{ steps.test-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache/cypress
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Validate environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Environment: ${{ github.event.inputs.test_environment || 'staging' }}"

      - name: Generate test matrix
        id: test-matrix
        run: |
          echo 'matrix={"test-suite":["unit","integration","e2e"],"os":["ubuntu-latest","windows-latest","macos-latest"]}' >> $GITHUB_OUTPUT

  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json
          npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Check TypeScript
        run: npm run type-check

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-results
          path: eslint-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: [setup, lint-and-format]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage --coverageReporters=lcov --coverageReporters=json --coverageReporters=text
        env:
          CI: true
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unit-tests,${{ matrix.os }},node-${{ matrix.node-version }}
          name: unit-tests-${{ matrix.os }}-node-${{ matrix.node-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.os }}-node-${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: naturinex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/naturinex_test

      - name: Run integration tests
        run: |
          npm run test:integration -- --coverage --coverageReporters=lcov
        env:
          CI: true
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/naturinex_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: integration-tests
          name: integration-tests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            junit.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build:test
        env:
          NODE_ENV: test

      - name: Start test server
        run: |
          npm run start:test &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          CI: true
          BROWSER: ${{ matrix.browser }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    if: ${{ github.event.inputs.run_security_tests != 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run dependency security audit
        run: |
          npm audit --audit-level=moderate
          npm run security:audit

      - name: Run OWASP security tests
        run: |
          npm run test:security
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          SECURITY_TEST_TIMEOUT: 30000

      - name: Run SAST with CodeQL
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            security-report.json
            snyk-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    if: ${{ github.event.inputs.run_performance_tests != 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run --out json=load-test-results.json load-testing/medication-analysis-load.js
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          K6_WEB_DASHBOARD: true
          K6_WEB_DASHBOARD_EXPORT: load-test-report.html

      - name: Run stress tests
        run: |
          k6 run --out json=stress-test-results.json load-testing/stress-test.js
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Generate performance report
        run: |
          npm run perf:report

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            load-test-results.json
            stress-test-results.json
            load-test-report.html
            performance-report/

  compliance-tests:
    name: HIPAA Compliance Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run HIPAA compliance tests
        run: |
          npm run test:compliance
        env:
          CI: true
          NODE_ENV: test
          COMPLIANCE_STRICT_MODE: true

      - name: Generate compliance report
        run: |
          npm run compliance:report

      - name: Upload compliance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-test-results
          path: |
            compliance-report.json
            hipaa-compliance-report.html

  mobile-tests:
    name: Mobile App Tests
    runs-on: macos-latest
    needs: [setup, lint-and-format]
    strategy:
      matrix:
        platform: [ios, android]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java (for Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Setup iOS Simulator
        if: matrix.platform == 'ios'
        run: |
          xcrun simctl list
          xcrun simctl create "iPhone 14" "iPhone 14" "iOS16.0"

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Build app for testing
        run: |
          npm run build:${{ matrix.platform }}:test

      - name: Run Detox tests
        run: |
          npm run test:detox:${{ matrix.platform }}
        env:
          CI: true

      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mobile-test-results-${{ matrix.platform }}
          path: |
            artifacts/
            detox-test-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: |
          npm run test:a11y

      - name: Run WAVE accessibility scan
        run: |
          npm run a11y:wave

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: |
            a11y-report.json
            wave-report.html

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3
        with:
          path: coverage-artifacts/

      - name: Merge coverage reports
        run: |
          npm install -g nyc
          nyc merge coverage-artifacts/ coverage/merged-coverage.json
          nyc report --reporter=lcov --reporter=html --temp-dir=coverage/

      - name: Check coverage threshold
        run: |
          npm run coverage:check
        env:
          COVERAGE_THRESHOLD: 80

      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: merged-coverage
          name: merged-coverage

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}
          flags: pr-coverage

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [
      unit-tests,
      integration-tests,
      e2e-tests,
      security-tests,
      performance-tests,
      compliance-tests,
      coverage-report
    ]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "E2E tests: ${{ needs.e2e-tests.result }}"
          echo "Security tests: ${{ needs.security-tests.result }}"
          echo "Performance tests: ${{ needs.performance-tests.result }}"
          echo "Compliance tests: ${{ needs.compliance-tests.result }}"
          echo "Coverage report: ${{ needs.coverage-report.result }}"

      - name: Quality gate decision
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.compliance-tests.result }}" != "success" ]]; then
            echo "❌ Quality gate failed - Critical tests failed"
            exit 1
          elif [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
               [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "⚠️ Quality gate warning - Some tests failed but deployment allowed"
            exit 0
          else
            echo "✅ Quality gate passed - All tests successful"
            exit 0
          fi

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: ${{ needs.quality-gate.result == 'success' && github.ref == 'refs/heads/main' }}
    environment:
      name: staging
      url: https://staging.naturinex.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment script here

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --env=staging
        env:
          STAGING_URL: https://staging.naturinex.com

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#naturinex-ci'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub release on success
        if: ${{ needs.quality-gate.result == 'success' && github.ref == 'refs/heads/main' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release created by CI/CD pipeline
            
            Test Results:
            - Unit Tests: ✅
            - Integration Tests: ✅
            - E2E Tests: ✅
            - Security Tests: ✅
            - Compliance Tests: ✅
            
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false