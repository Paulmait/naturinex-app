require('dotenv').config();const { initializeFirebase, isFirebaseAvailable, getFirestore, getAuth } = require('./config/firebase-init');// Test 1: Environment Variablesconst requiredEnvVars = [  'GEMINI_API_KEY',  'STRIPE_SECRET_KEY',   'STRIPE_WEBHOOK_SECRET',  'MONGODB_URI',  'FIREBASE_PROJECT_ID',  'FIREBASE_CLIENT_EMAIL',  'FIREBASE_PRIVATE_KEY'];let allEnvVarsPresent = true;requiredEnvVars.forEach(varName => {  const value = process.env[varName];  if (value) {     || varName.includes('SECRET') ? '***hidden***' : value.substring(0, 50) + '...'}`);  } else {    allEnvVarsPresent = false;  }});// Test 2: Firebase InitializationinitializeFirebase();if (isFirebaseAvailable()) {  // Test Firestore  const db = getFirestore();  if (db) {  } else {  }  // Test Auth  const auth = getAuth();  if (auth) {  } else {  }} else {}// Test 3: MongoDB Connectionconst mongoose = require('mongoose');mongoose.connect(process.env.MONGODB_URI, {  useNewUrlParser: true,  useUnifiedTopology: true}).then(() => {  // Test 4: Check Collections  mongoose.connection.db.listCollections().toArray((err, collections) => {    if (err) {    } else {      collections.forEach(col => {      });    }    // Test 5: Stripe Connection    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);    stripe.products.list({ limit: 1 })      .then(products => {      })      .catch(err => {      })      .finally(() => {        // Test 6: Gemini API        const { GoogleGenerativeAI } = require('@google/generative-ai');        try {          const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);        } catch (error) {        }        // Summary        if (allEnvVarsPresent && isFirebaseAvailable()) {        } else {        }        // Exit        process.exit(0);      });  });}).catch(err => {  process.exit(1);});