const { GoogleGenerativeAI } = require('@google/generative-ai');// Initialize Gemini AIconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);const model = genAI.getGenerativeModel({ model: "gemini-pro" });class SafetyValidator {  constructor() {    // Dangerous combinations and substances to flag    this.dangerousSubstances = [      'ephedra', 'comfrey', 'kava', 'aristolochia', 'pennyroyal',      'sassafras', 'yohimbe', 'bitter orange', 'country mallow',      'greater celandine', 'coltsfoot', 'chaparral'    ];    this.highRiskGroups = [      'pregnant women', 'nursing mothers', 'children',      'elderly', 'immunocompromised', 'pre-surgery patients'    ];    this.criticalInteractions = [      { drug: 'warfarin', herbs: ['ginkgo', 'garlic', 'ginger', 'ginseng'] },      { drug: 'antidepressants', herbs: ['st johns wort', 'sam-e'] },      { drug: 'diabetes medications', herbs: ['chromium', 'alpha-lipoic acid'] },      { drug: 'blood pressure medications', herbs: ['licorice', 'ephedra'] },      { drug: 'immunosuppressants', herbs: ['echinacea', 'astragalus'] }    ];  }  /**   * Validate safety of a natural remedy   */  async validateSafety(remedyData) {    const validationResults = {      isValid: true,      safetyScore: 100,      warnings: [],      errors: [],      recommendations: []    };    // Check for dangerous substances    const dangerousCheck = this.checkDangerousSubstances(remedyData);    if (dangerousCheck.found) {      validationResults.errors.push(...dangerousCheck.errors);      validationResults.safetyScore -= 50;      validationResults.isValid = false;    }    // Validate interactions    const interactionCheck = await this.validateInteractions(remedyData);    if (interactionCheck.hasIssues) {      validationResults.warnings.push(...interactionCheck.warnings);      validationResults.safetyScore -= interactionCheck.severityScore;    }    // Check vulnerable populations    const vulnerableCheck = this.checkVulnerablePopulations(remedyData);    if (vulnerableCheck.hasWarnings) {      validationResults.warnings.push(...vulnerableCheck.warnings);      validationResults.safetyScore -= 10;    }    // AI-powered comprehensive safety check    const aiSafetyCheck = await this.performAISafetyCheck(remedyData);    if (aiSafetyCheck.hasIssues) {      validationResults.warnings.push(...aiSafetyCheck.warnings);      validationResults.recommendations.push(...aiSafetyCheck.recommendations);      validationResults.safetyScore -= aiSafetyCheck.severityScore;    }    // Ensure safety score doesn't go below 0    validationResults.safetyScore = Math.max(0, validationResults.safetyScore);    // Update remedy safety rating based on validation    remedyData.safety.validationScore = validationResults.safetyScore;    remedyData.safety.validationWarnings = validationResults.warnings;    return validationResults;  }  /**   * Check for dangerous substances   */  checkDangerousSubstances(remedyData) {    const found = [];    const errors = [];    const name = remedyData.name.toLowerCase();    const compounds = remedyData.activeCompounds.map(c => c.toLowerCase());    this.dangerousSubstances.forEach(substance => {      if (name.includes(substance) || compounds.some(c => c.includes(substance))) {        found.push(substance);        errors.push(`Contains dangerous substance: ${substance}. This herb is not recommended for use.`);      }    });    return { found: found.length > 0, errors };  }  /**   * Validate drug interactions   */  async validateInteractions(remedyData) {    const warnings = [];    let severityScore = 0;    // Check known critical interactions    this.criticalInteractions.forEach(interaction => {      const herbName = remedyData.name.toLowerCase();      if (interaction.herbs.includes(herbName)) {        warnings.push({          type: 'drug-interaction',          severity: 'major',          message: `Critical interaction with ${interaction.drug}. Consult healthcare provider before use.`        });        severityScore += 20;      }    });    // Check remedy's listed interactions    remedyData.interactions.medications.forEach(interaction => {      if (interaction.severity === 'major') {        warnings.push({          type: 'drug-interaction',          severity: 'major',          message: `Major interaction with ${interaction.name}: ${interaction.description}`        });        severityScore += 15;      }    });    return { hasIssues: warnings.length > 0, warnings, severityScore };  }  /**   * Check safety for vulnerable populations   */  checkVulnerablePopulations(remedyData) {    const warnings = [];    // Pregnancy warnings    if (!['safe', 'likely-safe'].includes(remedyData.safety.pregnancySafety)) {      warnings.push({        type: 'vulnerable-population',        severity: 'moderate',        message: 'Not recommended during pregnancy without medical supervision'      });    }    // Lactation warnings    if (!['safe', 'likely-safe'].includes(remedyData.safety.lactationSafety)) {      warnings.push({        type: 'vulnerable-population',        severity: 'moderate',        message: 'Not recommended while breastfeeding without medical supervision'      });    }    // Check contraindications for vulnerable groups    const contraindications = remedyData.safety.contraindications.join(' ').toLowerCase();    this.highRiskGroups.forEach(group => {      if (contraindications.includes(group)) {        warnings.push({          type: 'vulnerable-population',          severity: 'moderate',          message: `Special caution required for ${group}`        });      }    });    return { hasWarnings: warnings.length > 0, warnings };  }  /**   * AI-powered comprehensive safety check   */  async performAISafetyCheck(remedyData) {    try {      const prompt = `        Perform a comprehensive safety analysis for this natural remedy:        Name: ${remedyData.name}        Active Compounds: ${remedyData.activeCompounds.join(', ')}        Known Side Effects: ${remedyData.safety.sideEffects.map(e => e.effect).join(', ')}        Drug Interactions: ${remedyData.interactions.medications.map(m => m.name).join(', ')}        Analyze for:        1. Hidden safety risks not commonly reported        2. Cumulative effects with long-term use        3. Risks for specific populations (elderly, children, chronic conditions)        4. Quality control issues (contamination, mislabeling risks)        5. Overdose potential and symptoms        Provide response as JSON:        {          "hasIssues": boolean,          "severityScore": number (0-30),          "warnings": [            {"type": "", "severity": "", "message": ""}          ],          "recommendations": [            "specific safety recommendation"          ],          "qualityControlNotes": "",          "overdoseRisk": ""        }      `;      const result = await model.generateContent(prompt);      const response = await result.response;      const text = response.text();      const jsonMatch = text.match(/\{[\s\S]*\}/);      if (jsonMatch) {        return JSON.parse(jsonMatch[0]);      }      return { hasIssues: false, warnings: [], recommendations: [], severityScore: 0 };    } catch (error) {      console.error('AI safety check error:', error.message);      return { hasIssues: false, warnings: [], recommendations: [], severityScore: 0 };    }  }  /**   * Generate safety report   */  generateSafetyReport(remedyData, validationResults) {    return {      remedyName: remedyData.name,      overallSafety: this.calculateOverallSafety(validationResults.safetyScore),      safetyScore: validationResults.safetyScore,      criticalWarnings: validationResults.errors,      importantWarnings: validationResults.warnings.filter(w => w.severity === 'major'),      generalWarnings: validationResults.warnings.filter(w => w.severity !== 'major'),      recommendations: validationResults.recommendations,      certificationStatus: validationResults.isValid ? 'APPROVED' : 'REQUIRES_REVIEW',      reviewDate: new Date(),      nextReviewDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // 90 days    };  }  /**   * Calculate overall safety rating   */  calculateOverallSafety(score) {    if (score >= 90) return 'very-safe';    if (score >= 70) return 'safe';    if (score >= 50) return 'moderate';    if (score >= 30) return 'caution';    return 'dangerous';  }}module.exports = SafetyValidator;