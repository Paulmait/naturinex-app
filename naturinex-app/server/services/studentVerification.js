// Student Verification Serviceconst admin = require('firebase-admin');// List of valid educational email domainsconst educationalDomains = [  '.edu',  '.ac.uk',  '.edu.au',  '.edu.ca',  '.ac.in',  '.edu.sg',  '.edu.my',  '.ac.nz',  '.edu.hk',  '.ac.jp',  '.edu.cn',  '.ac.za',  '.edu.mx',  '.edu.br',  '.ac.kr',  '.edu.tw',  '.edu.ph',  '.ac.th',  '.edu.vn',  '.ac.id'];// Popular student verification servicesconst verificationServices = {  sheerID: {    apiKey: process.env.SHEERID_API_KEY,    programId: process.env.SHEERID_PROGRAM_ID  },  studentBeans: {    apiKey: process.env.STUDENT_BEANS_API_KEY  },  unidays: {    apiKey: process.env.UNIDAYS_API_KEY  }};// Check if email is from educational institutionfunction isEducationalEmail(email) {  if (!email) return false;  const domain = email.toLowerCase();  return educationalDomains.some(eduDomain => domain.endsWith(eduDomain));}// Verify student status via email domainasync function verifyByEmail(email) {  if (isEducationalEmail(email)) {    return {      verified: true,      method: 'email_domain',      institution: extractInstitution(email),      expiresAt: getAcademicYearEnd()    };  }  return { verified: false };}// Extract institution name from emailfunction extractInstitution(email) {  const domain = email.split('@')[1];  // Remove common suffixes  const institution = domain    .replace(/\.(edu|ac)\.(.*?)$/, '')    .replace(/\.(edu|ac)$/, '')    .split('.')    .map(word => word.charAt(0).toUpperCase() + word.slice(1))    .join(' ');  return institution;}// Get academic year end datefunction getAcademicYearEnd() {  const now = new Date();  const currentYear = now.getFullYear();  const currentMonth = now.getMonth();  // If after June, next year's June; otherwise this year's June  const academicYear = currentMonth >= 6 ? currentYear + 1 : currentYear;  return new Date(academicYear, 5, 30); // June 30th}// Verify via SheerID (popular student verification service)async function verifyViaSheerID(userData) {  if (!verificationServices.sheerID.apiKey) {    return { verified: false, error: 'SheerID not configured' };  }  try {    // In production, make actual API call to SheerID    // For now, simulate verification    return {      verified: true,      method: 'sheerid',      verificationId: 'sheer_' + Date.now(),      expiresAt: getAcademicYearEnd()    };  } catch (error) {    console.error('SheerID verification error:', error);    return { verified: false, error: error.message };  }}// Save student verification statusasync function saveStudentStatus(userId, verificationData) {  try {    await admin.firestore().collection('users').doc(userId).update({      studentVerification: {        ...verificationData,        verifiedAt: admin.firestore.FieldValue.serverTimestamp(),        lastChecked: admin.firestore.FieldValue.serverTimestamp()      }    });    // Track verification event    await admin.firestore().collection('studentVerifications').add({      userId,      ...verificationData,      timestamp: admin.firestore.FieldValue.serverTimestamp()    });    return true;  } catch (error) {    console.error('Error saving student status:', error);    return false;  }}// Check if student verification is still validasync function checkStudentStatus(userId) {  try {    const userDoc = await admin.firestore().collection('users').doc(userId).get();    if (!userDoc.exists) return { isStudent: false };    const userData = userDoc.data();    const verification = userData.studentVerification;    if (!verification || !verification.verified) {      return { isStudent: false };    }    // Check if verification has expired    const expiresAt = verification.expiresAt?.toDate() || new Date(0);    const now = new Date();    if (now > expiresAt) {      // Verification expired, need to reverify      await userDoc.ref.update({        'studentVerification.verified': false,        'studentVerification.expiredAt': admin.firestore.FieldValue.serverTimestamp()      });      return { isStudent: false, needsReverification: true };    }    return {      isStudent: true,      verification: {        method: verification.method,        institution: verification.institution,        expiresAt: expiresAt.toISOString()      }    };  } catch (error) {    console.error('Error checking student status:', error);    return { isStudent: false };  }}// Create student discount codeasync function createStudentDiscount(userId) {  const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);  try {    // Check if user already has a student discount    const existingCodes = await stripe.promotionCodes.list({      code: `STUDENT_${userId}`,      limit: 1    });    if (existingCodes.data.length > 0) {      return existingCodes.data[0];    }    // Create personalized student discount    const promoCode = await stripe.promotionCodes.create({      coupon: 'STUDENT40', // 40% off forever coupon      code: `STUDENT_${userId}`,      max_redemptions: 1,      metadata: {        userId,        type: 'student_verification'      }    });    return promoCode;  } catch (error) {    console.error('Error creating student discount:', error);    return null;  }}// Automated verification flowasync function verifyStudent(userId, email, additionalData = {}) {  // Step 1: Try email verification first (instant)  let result = await verifyByEmail(email);  // Step 2: If email fails, try third-party verification  if (!result.verified && additionalData.useThirdParty) {    result = await verifyViaSheerID({      email,      firstName: additionalData.firstName,      lastName: additionalData.lastName,      birthDate: additionalData.birthDate,      institution: additionalData.institution    });  }  // Step 3: Save verification status  if (result.verified) {    await saveStudentStatus(userId, result);    // Create personalized discount    const discount = await createStudentDiscount(userId);    if (discount) {      result.discountCode = discount.code;    }  }  return result;}// Get all applicable student benefitsasync function getStudentBenefits(userId) {  const status = await checkStudentStatus(userId);  if (!status.isStudent) {    return {      hasStudentDiscount: false,      benefits: []    };  }  return {    hasStudentDiscount: true,    discountPercentage: 40,    benefits: [      '40% off all plans forever',      'Extended free trial (14 days)',      'Priority support',      'Campus ambassador program eligibility',      'Exclusive student resources'    ],    verification: status.verification  };}module.exports = {  isEducationalEmail,  verifyStudent,  checkStudentStatus,  getStudentBenefits,  createStudentDiscount,  getAcademicYearEnd};