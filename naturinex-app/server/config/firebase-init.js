const admin = require('firebase-admin');/** * Initialize Firebase Admin SDK with proper error handling * This handles both production (with service account) and development environments */function initializeFirebase() {  // Check if Firebase is disabled  if (process.env.DISABLE_FIREBASE === 'true') {    return null;  }  // Check if already initialized  if (admin.apps.length > 0) {    return admin.app();  }  try {    // Production: Use service account credentials from environment variables    if (process.env.FIREBASE_PRIVATE_KEY && process.env.FIREBASE_CLIENT_EMAIL && process.env.FIREBASE_PROJECT_ID) {      const serviceAccount = {        projectId: process.env.FIREBASE_PROJECT_ID,        privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,      };      admin.initializeApp({        credential: admin.credential.cert(serviceAccount),        databaseURL: `https://${process.env.FIREBASE_PROJECT_ID}.firebaseio.com`      });    }     // Development: Use client configuration (limited functionality)    else if (process.env.FIREBASE_PROJECT_ID) {      // Initialize with project ID only - this will have limited functionality      admin.initializeApp({        projectId: process.env.FIREBASE_PROJECT_ID,      });      ');    }    // Fallback: Initialize without credentials (very limited functionality)    else {      return null;    }    return admin.app();  } catch (error) {    console.error('❌ Failed to initialize Firebase Admin:', error.message);    return null;  }}// Helper function to check if Firebase is availablefunction isFirebaseAvailable() {  return admin.apps.length > 0;}// Helper function to get Firestore with error handlingfunction getFirestore() {  if (isFirebaseAvailable()) {    return admin.firestore();  }  return null;}// Helper function to get Auth with error handlingfunction getAuth() {  if (isFirebaseAvailable()) {    return admin.auth();  }  return null;}module.exports = {  initializeFirebase,  isFirebaseAvailable,  getFirestore,  getAuth,  admin};