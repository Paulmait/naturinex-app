const mongoose = require('mongoose');require('dotenv').config();async function testConnection() {  try {    // Connect to MongoDB    const uri = process.env.MONGODB_URI;    if (!uri) {      throw new Error('MONGODB_URI not found in environment variables');    }    await mongoose.connect(uri);    // Get database info    const db = mongoose.connection.db;    // List collections    const collections = await db.listCollections().toArray();    .join(', ') || 'None yet'}\n`);    // Test creating a natural remedy document    const NaturalRemedy = require('./models/naturalRemedySchema');    const testRemedy = {      name: 'Test Herb',      commonNames: ['Test Common Name'],      scientificName: 'Testus herbicus',      category: 'herb',      description: 'A test herb for connection verification',      conditions: [{        name: 'Test Condition',        effectiveness: 'moderate',        evidence: {          quality: 'low',          studies: 0        }      }],      safety: {        generalSafety: 'safe',        sideEffects: [],        contraindications: [],        pregnancySafety: 'unknown'      },      interactions: {        medications: [],        herbs: [],        conditions: []      },      dosage: {        recommended: 'Test dosage',        forms: ['test'],        duration: 'As needed'      },      preparation: ['Test preparation'],      activeCompounds: [],      qualityScore: 50,      dataSources: [{        name: 'Test Source',        url: 'https://test.com',        lastAccessed: new Date()      }],      lastValidated: new Date()    };    const doc = await NaturalRemedy.create(testRemedy);    // Query test    const found = await NaturalRemedy.findOne({ name: 'Test Herb' });    // Clean up    await NaturalRemedy.deleteOne({ _id: doc._id });    // Test data ingestion collections    const requiredCollections = ['naturalRemedies', 'ingestionLogs'];    for (const collName of requiredCollections) {      const exists = collections.some(c => c.name === collName);      '}`);    }    // Disconnect    await mongoose.disconnect();  } catch (error) {    console.error('\n‚ùå MongoDB connection error:', error.message);    console.error('\nüí° Troubleshooting tips:');    console.error('   1. Check if MONGODB_URI is set in .env file');    console.error('   2. Verify your IP is whitelisted in MongoDB Atlas Network Access');    console.error('   3. Confirm database user credentials are correct');    console.error('   4. Ensure your cluster is running (not paused)');    process.exit(1);  }}// Run the testtestConnection();